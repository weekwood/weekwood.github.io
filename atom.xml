<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Di Wu's blog]]></title>
  <link href="http://weekwood.github.com/atom.xml" rel="self"/>
  <link href="http://weekwood.github.com/"/>
  <updated>2014-05-27T11:06:53+08:00</updated>
  <id>http://weekwood.github.com/</id>
  <author>
    <name><![CDATA[Di Wu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[7 tips for a Node.js padawan]]></title>
    <link href="http://weekwood.github.com/2013/09/24/7-tips-for-a-node-dot-js-padawan/"/>
    <updated>2013-09-24T14:52:00+08:00</updated>
    <id>http://weekwood.github.com/2013/09/24/7-tips-for-a-node-dot-js-padawan</id>
    <content type="html"><![CDATA[<h2>一些我更愿意在开始就知道东西</h2>

<p>利用 Node.js 开发是一个非常有趣,和令人满足的过程, 他有3万多个模块可以选择使用,并且所有的模块可以非常容易的集成入现有的应用之中.</p>

<p>无论如何,对于一些刚开始使用Node.js 开发的的人来说, 很容易碰壁,在这个文章中,我会提到在你学习过程中遇到的问题.</p>

<!-- more -->


<h3>贴士 1: 在开发环境使用 nodemon, 在生产环境使用pm2</h3>

<p>当你第一次开发Node.js应用的时候, 其中一件事情就是一次又一次的运行[file].js 就和揭伤疤一样. 当我第一次开发的node app时候,这个让我感到异常挫败和痛苦, 尤其是每当我修改很小东西的时候需要 <code>control+c</code></p>

<p>幸运的是我发现了一个非常棒的工具 <a href="https://github.com/remy/nodemon"><code>Nodemon</code></a>. 你可以利用以下的命令来安装</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install -g nodemon</span></code></pre></td></tr></table></div></figure>


<p>Nodemon 是一个令人惊叹的工具, 当你全局安装他以后, 可以通过 nodemon [file].js 来启动你的node.js scripts,它会告诉nodemon来监视你的script和scripts的所有变化, 这样的Node.js开发方式非常震撼以及让大大提高开发速度.</p>

<p>那么,生产环境又如何, 除非你用了 <code>heroku</code>, <code>Nodejitsu</code> 或者其他一些好的 Node.js 平台(也许他们有类似的功能), 但是碰巧你用了EC2 或者一些其他的云平台来运行你的Node.js app, 你如何能然保证这是一个始终运行的Node.js app?</p>

<p>案就是 <a href="https://github.com/Unitech/pm2">PM2</a>, PM2 是一个类似于Nodemon的工具,不同之处在于它用于生产环境, 和Nodemon相似的地方在于他会监控你的app的任何修改或者重新部署,但是有更好的一面, PM2 在遭遇到崩溃的时候,他会正确重启你的app.</p>

<p>PM2的优胜之处在于当你要将app需要多核处理的时候,PM2内部集成的负载均衡可以让你很容易的去指定运行多少个实例.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pm2 start app.js -i max</span></code></pre></td></tr></table></div></figure>


<p><code>-i</code> 参数目的是指定运行多少个实例,在这个例子中 PM2 使用了一个常量 <code>max</code> 来扩展你的app运转到你最大的核数,不要忘记Node 平时只会运行在单核!</p>

<h3>贴士 2: Async 或者 Q</h3>

<p>当你专注于写了更多的node.js apps的时候,你肯定领略了什么是回调地狱. 如果你还不知道,这里有一个例子:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'> <span class="kd">function</span> <span class="nx">register</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">password</span><span class="p">,</span> <span class="nx">cb</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">checkIfNameExists</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">){</span>
</span><span class='line'>   <span class="k">if</span><span class="p">(</span><span class="nx">err</span><span class="p">){</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">cb</span><span class="p">(</span><span class="err">“</span><span class="nx">error</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>   <span class="nx">checkIfPasswordGood</span><span class="p">(</span><span class="nx">password</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">err</span><span class="p">){</span>
</span><span class='line'>     <span class="k">return</span> <span class="nx">cb</span><span class="p">(</span><span class="err">“</span><span class="nx">error</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">createAccount</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span><span class="nx">password</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span><span class="nx">result</span><span class="p">){</span>
</span><span class='line'>     <span class="k">if</span><span class="p">(</span><span class="nx">err</span><span class="p">){</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">cb</span><span class="p">(</span><span class="err">“</span><span class="nx">error</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>     <span class="nx">createBlog</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">sendEmail</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">){</span>
</span><span class='line'>       <span class="nx">callback</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>     <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>   <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这显然不是一个有用或者令人折服的代码, 反而进入一种回调地狱般两难的境地,是你的话将如何避免?</p>

<p>一个简单的办法是使用events, 但是我个人不建议这么做,因为使用events来调用只有一个用途的私有方法,足以令人受挫</p>

<p>所以你该怎么做? 这里有两个编译好的模块, <code>async.js</code> 和 <code>Q</code>, 他们两个都可以防止落入回调地狱</p>

<p><a href="https://github.com/caolan/async">Async.js</a> 或者 &#8216;async&#8217; 让你可以容易的执行一些连续或者平行的任务,在不依赖一个又一个的嵌套循环前提下.</p>

<p>下面是一些来自Async的readme,写明了他支持的模式, 如需获取全部的支持方式请去他们的github主页查看.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'> <span class="nx">async</span><span class="p">.</span><span class="nx">map</span><span class="p">([</span><span class="err">‘</span><span class="nx">file1</span><span class="s1">&#39;,’file2&#39;</span><span class="p">,</span><span class="err">’</span><span class="nx">file3</span><span class="s1">&#39;], fs.stat, function(err, results){</span>
</span><span class='line'><span class="s1">  // results is now an array of stats for each file</span>
</span><span class='line'><span class="s1"> });</span>
</span><span class='line'><span class="s1"> </span>
</span><span class='line'><span class="s1"> async.filter([‘file1&#39;</span><span class="p">,</span><span class="err">’</span><span class="nx">file2</span><span class="s1">&#39;,’file3&#39;</span><span class="p">],</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">exists</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">results</span><span class="p">){</span>
</span><span class='line'> <span class="c1">// results now equals an array of the existing files</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'> <span class="nx">async</span><span class="p">.</span><span class="nx">parallel</span><span class="p">([</span>
</span><span class='line'>  <span class="kd">function</span><span class="p">(){</span> <span class="err">…</span> <span class="p">},</span>
</span><span class='line'>  <span class="kd">function</span><span class="p">(){</span> <span class="err">…</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">],</span> <span class="nx">callback</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'> <span class="nx">async</span><span class="p">.</span><span class="nx">series</span><span class="p">([</span>
</span><span class='line'>  <span class="kd">function</span><span class="p">(){</span> <span class="err">…</span> <span class="p">},</span>
</span><span class='line'>  <span class="kd">function</span><span class="p">(){</span> <span class="err">…</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">]);</span>
</span><span class='line'>
</span><span class='line'> <span class="nx">async</span><span class="p">.</span><span class="nx">waterfall</span><span class="p">([</span>
</span><span class='line'>  <span class="kd">function</span><span class="p">(</span><span class="nx">callback</span><span class="p">){</span>
</span><span class='line'>   <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="err">‘</span><span class="nx">one</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="nx">two</span><span class="err">’</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="kd">function</span><span class="p">(</span><span class="nx">arg1</span><span class="p">,</span> <span class="nx">arg2</span><span class="p">,</span> <span class="nx">callback</span><span class="p">){</span>
</span><span class='line'>   <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="err">‘</span><span class="nx">three</span><span class="err">’</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="kd">function</span><span class="p">(</span><span class="nx">arg1</span><span class="p">,</span> <span class="nx">callback</span><span class="p">){</span>
</span><span class='line'> <span class="c1">// arg1 now equals ‘three’</span>
</span><span class='line'> <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="err">‘</span><span class="nx">done</span><span class="err">’</span><span class="p">);</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'> <span class="p">],</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'> <span class="c1">// result now equals ‘done’ </span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果我们用async的waterfall来修改之前的例子,结果将更加容易阅读, 再也不用让你的代码看起来像一个死亡金字塔.</p>

<p>另一个重要的库叫做 <a href="https://github.com/kriskowal/q">Q</a>. 这个库是一个暴漏promises的概念, Promise 是一个含有&#8217;promise&#8217;方法的返回对象,他提供了一个最终的返回值,非常优雅的将javascripts的异步和node.js紧密联系在一起.</p>

<p>For example, taken from Q’s repo page.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'> <span class="nx">promiseMeSomething</span><span class="p">()</span>
</span><span class='line'> <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'> <span class="p">},</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">reason</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个 promise me 方法 正确返回了一个对象, 对象将在传入value的时候调用这个方法当,并且他提供了一个额外的callback来处理失败后的返回值</p>

<p>这是一个非常有条理的方式来避免回调地狱,如果你重写我们之前的那个例子,你可以非常容易的让这些函数正确被调用并执行.</p>

<p>就和我之前说的一样, 我很不愿创建只有一个用途的一堆功能,相反的在&#8217;then&#8217;之后传入一个方法名,仅仅创建了一个匿名的内部功能和传递,当然了选择权始终在你手里.</p>

<p>总的来说,当你落入回调地狱的时候,是时候去看看 async.js或者Q吧.</p>

<blockquote><p>我的选择? 当然是 Q</p></blockquote>

<h3>贴士 3: 轻松调试 Node.js apps</h3>

<p>如果你从一个IDE重度集成的语言比如java 或者C# 转来调试Node.js, 你一定会感到很困扰, 大部分新加入node的开发者采用了&#8217;flow&#8217;的调试模式,从这一刻开始你最好的朋友就是console.log</p>

<p>但是依然有更常见的调试方式来代替, Node.js 内置了一个调试器你可以称为 node debug, 不过我更喜欢的 node-inspector</p>

<p>他们的github说 &#8220;Node Inspector 是一个使用Blink Developer Tools (以前称为WebKit Web Inspector)node.js调试器的界面,&#8221;</p>

<p>简而言之,node-inspector 可以让你用任何你想用的编辑器和chrome web tools来调试你的应用,这是多么的性感.</p>

<p>Node-inspector 可以让你做一些非常酷的事情,比如实时修改,单步调试,注入以及一堆其他非常酷的东西.</p>

<p>让我们来根据指示一步一步安装</p>

<p><a href="https://github.com/node-inspector/node-inspector">https://github.com/node-inspector/node-inspector</a></p>

<h3>贴士 4: Nodefly</h3>

<p>一旦你有你的应用程序正常运行，你可能会问自己，你怎么可以监视它的性能和配置文件，以确保您的应用程序运行在最佳的速度。最简单的答案是一个伟大的服务，我称为Nodefly。</p>

<p>用简单的一行代码Nodefly开始监视你的应用程序内存泄漏，测量redis用了多久，mongo查询和一堆其他很酷的东西。</p>

<p><a href="http://www.nodefly.com">http://www.nodefly.com</a></p>

<h3>贴士 5: 利用NPM进行模块管理</h3>

<p>Node做最常见的事情之一是通过NPM安装软件包。Node有一个惊人的包管理器安装所有指定在你的package.json的manifest文件中的模块。然而，所有初学者都会碰上保持的package.json文件中您所使用的所有的模块都是最新版。</p>

<p>这似乎是一个痛苦的过程,总是打开的package.json来更新新模块的依赖，但许多人不知道的是npm会为你做这个！</p>

<p>非常简单运行 npm install - save module_name 然后 npm将自动更新你的package.json 包含正确的模块和版本,</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">npm</span> <span class="nx">install</span> <span class="o">-</span> <span class="nx">save</span> <span class="nx">module_name</span>
</span></code></pre></td></tr></table></div></figure>


<h3>贴士 6: 不要检查node_modules 文件夹</h3>

<p>虽然我们的话题一直是modules和npm，但是并不是不是很多人都知道，你不应该提交node_modules文件夹。这背后最大的原因是，没有必要提交这个文件夹。只要有人下载你的代码，他们可通过运行NPM来安装和下载所有需要的模块。</p>

<p>您可能会说，它是不是一个大问题，如果检查node_modules，但是，如果下载代码的人使用了和你编译modules不一样的操作系统的来安装通过NPM？你的应用程序将会崩溃，下载代码的人将不知道为什么会如此！</p>

<p>举个例子 <code>bcrypt</code> 以及 <code>sentimental</code> 如果当在您安装在主机系统上编译他们,因为他们用了本地C语言组件来编译.</p>

<p>避免检查node_modules文件夹的方式是加入.gitignore</p>

<blockquote><p>// .gitignore node_modules/*</p></blockquote>

<h3>贴士 7: 别忘记返回</h3>

<p>初学者经常犯一个很常识的错误,就是忘记callback后的返回值,虽然有些时候，这没有影响，有很多时候，你会遇到奇怪的问题，因为你的回调被调用两次。</p>

<p>让我们看一个简单的例子</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'> <span class="kd">function</span> <span class="k">do</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span><span class="nx">result</span><span class="p">,</span> <span class="nx">callback</span><span class="p">){</span>
</span><span class='line'>   <span class="k">if</span><span class="p">(</span><span class="nx">err</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">callback</span><span class="p">(</span><span class="err">“</span><span class="nx">error</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">callback</span><span class="p">(</span><span class="err">“</span><span class="nx">good</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>乍一看，这个片段是有道理的。如果有错误，在回调中发送“错误。如果不发送return，调用callaback后这个函数不会停下来。它只是将移动到调用回callback(&#8220;good&#8221;)。</p>

<p>这样做在长期和复杂的代码行里面会节省几个小时的调试。</p>

<h3>翻译自</h3>

<p><a href="https://medium.com/tech-talk/e7c0b0e5ce3c">https://medium.com/tech-talk/e7c0b0e5ce3c</a> by Faisal Abid</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS7 兼容适配]]></title>
    <link href="http://weekwood.github.com/2013/09/23/ios7jie-mian-guo-du/"/>
    <updated>2013-09-23T22:18:00+08:00</updated>
    <id>http://weekwood.github.com/2013/09/23/ios7jie-mian-guo-du</id>
    <content type="html"><![CDATA[<h3>如何判断版本号</h3>

<p>很多时候我们需要做不同版本的适配,所以首先要进行版本选择</p>

<ul>
<li>方式一</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSUInteger</span> <span class="n">DeviceSystemMajorVersion</span><span class="p">();</span>
</span><span class='line'><span class="n">NSUInteger</span> <span class="nf">DeviceSystemMajorVersion</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">static</span> <span class="n">NSUInteger</span> <span class="n">_deviceSystemMajorVersion</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="k">static</span> <span class="n">dispatch_once_t</span> <span class="n">onceToken</span><span class="p">;</span>
</span><span class='line'>      <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">onceToken</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>       <span class="n">_deviceSystemMajorVersion</span> <span class="o">=</span> <span class="p">[[[[[</span><span class="n">UIDevice</span> <span class="n">currentDevice</span><span class="p">]</span> <span class="n">systemVersion</span><span class="p">]</span>
</span><span class='line'>           <span class="nl">componentsSeparatedByString:</span><span class="s">@&quot;.&quot;</span><span class="p">]</span> <span class="nl">objectAtIndex:</span><span class="mi">0</span><span class="p">]</span> <span class="n">intValue</span><span class="p">];</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="n">_deviceSystemMajorVersion</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp"> #define MY_MACRO_NAME (DeviceSystemMajorVersion() &lt; 7)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<ul>
<li>方式二</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">floor</span><span class="p">(</span><span class="n">NSFoundationVersionNumber</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="n">NSFoundationVersionNumber_iOS_6_1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="c1">// Load resources for iOS 6.1 or earlier</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>   <span class="c1">// Load resources for iOS 7 or later</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>新的barTintColor</h3>

<p>iOS7 中新增了<code>barTintColor</code> 来取代原有的 <code>tintColor</code>, 现在<code>barTintColor</code>表示对背景色的修改,<code>而原有的tintColor</code>只修改对应bar上的按钮</p>

<h3>自定义 UIBarButtonItem 偏移</h3>

<p>在iOS7中自定义的 <code>UIBarButtonItem</code> 所有的item向中间偏移了5个像素,所以需要修改<code>alignmentRectInsets</code>来适配, 例如</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">UIEdgeInsets</span><span class="p">)</span><span class="nf">alignmentRectInsets</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">UIEdgeInsets</span> <span class="n">insets</span> <span class="o">=</span> <span class="n">UIEdgeInsetsMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">SYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO</span><span class="p">(</span><span class="s">@&quot;7&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">isLeft</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">insets</span> <span class="o">=</span> <span class="n">UIEdgeInsetsMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mf">5.0f</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="p">{</span> <span class="c1">// IF_ITS_A_RIGHT_BUTTON</span>
</span><span class='line'>            <span class="n">insets</span> <span class="o">=</span> <span class="n">UIEdgeInsetsMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mf">5.0f</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">insets</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>edgesForExtendedLayout 是什么</h3>

<p>edgesForExtendedLayout是一个类型为UIExtendedEdge的属性，指定边缘要延伸的方向。
因为iOS7鼓励全屏布局，它的默认值很自然地是UIRectEdgeAll，四周边缘均延伸，就是说，如果即使视图中上有navigationBar，下有tabBar，那么视图仍会延伸覆盖到四周的区域。</p>

<p>如果把视图做如下设置，那么视图就不会延伸到这些bar的后面了.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">edgesForExtendedLayout</span> <span class="o">=</span> <span class="n">UIExtendedEdgeNone</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>一些相关的属性</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">automaticallyAdjustsScrollViewInsets</span> <span class="o">=</span> <span class="n">YES</span>
</span></code></pre></td></tr></table></div></figure>


<p>在iOS7中如果视图里面存在唯一一个UIScrollView或其子类View，那么它会自动设置相应的内边距，这样可以让scroll占据整个视图，又不会让导航栏遮盖.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">extendedLayoutIncludesOpaqueBars</span> <span class="o">=</span> <span class="n">YES</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后一个介绍的新属性是extendedLayoutIncludesOpaqueBars，这个属性指定了当Bar使用了不透明图片时，视图是否延伸至Bar所在区域，默认值时NO。</p>

<h3>grouped 的变化</h3>

<p>在iOS7 中UITableView的grouped延伸至两边变成了通栏.里面的控件用autolayout来兼容</p>

<p>PS: 一个不是问题的问题,在XCode5中如果是一个xib创建的grouped的tableView,将不会正常显示,需要重新初始化,例如</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">initWithNibName:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">nibNameOrNil</span> <span class="nf">bundle:</span><span class="p">(</span><span class="n">NSBundle</span> <span class="o">*</span><span class="p">)</span><span class="nv">nibBundleOrNil</span><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="nl">initWithNibName:</span><span class="n">nibNameOrNil</span> <span class="nl">bundle:</span><span class="n">nibBundleOrNil</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">tableView</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UITableView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame:</span><span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">bounds</span> <span class="nl">style:</span><span class="n">UITableViewStyleGrouped</span><span class="p">];</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">tableView</span><span class="p">.</span><span class="n">backgroundView</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">tableView</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="n">TOP_VIEW_COLOR</span><span class="p">;</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">tableView</span><span class="p">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">tableView</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>一些情况下 window.tintColor 的使用</h3>

<p>如果不为窗体指定着色，则会使用系统默认的颜色。</p>

<p>默认情况下，视图的着色是nil，意味着视图使用父级的着色。也就是说哪怕你不设置着色的话，视图也总能够获取到一个色值。</p>

<p>总的来说，最好在视图还没有显示到屏幕上之前指定它的着色。想让视图继承上个层级的着色的话，就将着色设置为nil。</p>

<h3>info.plist 中的View controller-based status bar appearance</h3>

<p>如果你想要隐藏status bar, 或者用原来的方式修改status bar的颜色.在info.plist中增加这个属性,并且设置为<code>NO</code></p>

<h3>UITextView 的改变</h3>

<p>这个请参考 <a href="http://stackoverflow.com/questions/18368567/uitableviewcell-with-uitextview-height-in-ios-7">stackover flow</a></p>

<h3>消失的search bar</h3>

<p>PS: 另一个不是问题的问题,把searchBar 当做tableView的header的时候,如果含有UISearchDisplayController,有时候会导致search bar消失. 目前没有找到很好的办法,目前重新初始化可以解决.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidAppear:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="nl">viewDidAppear:</span><span class="n">animated</span><span class="p">];</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">searchController</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UISearchDisplayController</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithSearchBar:</span><span class="n">self</span><span class="p">.</span><span class="n">searchBar</span> <span class="nl">contentsController:</span><span class="n">self</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">searchController</span> <span class="nl">setDelegate:</span><span class="n">self</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">searchController</span> <span class="nl">setSearchResultsDataSource:</span><span class="n">self</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">searchController</span> <span class="nl">setSearchResultsDelegate:</span><span class="n">self</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>新的UITableViewCellScrollView</h3>

<p>在iOS7之前UITablleViewCell中得contentView得superView就是UITableViewCell。但是在iOS7得时候，contentView得superView确实UITableViewCellScrollView.可以用以下代码来获取</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@implementation</span> <span class="nc">UIView</span> <span class="nl">(GetCellFromContentviewSubview)</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">UITableViewCell</span> <span class="o">*</span><span class="p">)</span><span class="nf">getCellFromContentviewSubview</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([[[</span><span class="n">self</span> <span class="n">superview</span><span class="p">]</span> <span class="n">superview</span><span class="p">]</span> <span class="nl">isKindOfClass:</span><span class="p">[</span><span class="n">UITableViewCell</span> <span class="n">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="n">UITableViewCell</span> <span class="o">*</span><span class="p">)[[</span><span class="n">self</span> <span class="n">superview</span><span class="p">]</span> <span class="n">superview</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">([[[[</span><span class="n">self</span> <span class="n">superview</span><span class="p">]</span> <span class="n">superview</span><span class="p">]</span> <span class="n">superview</span><span class="p">]</span> <span class="nl">isKindOfClass:</span><span class="p">[</span><span class="n">UITableViewCell</span> <span class="n">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="n">UITableViewCell</span> <span class="o">*</span><span class="p">)[[[</span><span class="n">self</span> <span class="n">superview</span><span class="p">]</span> <span class="n">superview</span><span class="p">]</span> <span class="n">superview</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span><span class="p">{</span>
</span><span class='line'>         <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;something Panic happens&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>参考资料</h3>

<p><a href="http://mued.sohu.com/2013/06/ios-7-ui-transition-guide/">iOS 7用户界面过渡指南</a>
<a href="http://www.vinqon.com/codeblog/?detail/11109">Redesign Your App for iOS 7 之 页面布局</a></p>

<h3>未完待续…</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-c Code Review]]></title>
    <link href="http://weekwood.github.com/2013/08/11/objective-c-code-review/"/>
    <updated>2013-08-11T12:14:00+08:00</updated>
    <id>http://weekwood.github.com/2013/08/11/objective-c-code-review</id>
    <content type="html"><![CDATA[<h3>参考资料</h3>

<p><a href="http://zh-google-styleguide.readthedocs.org/en/latest/google-objc-styleguide/">Google Objective-C Style Guide 中文版</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress Can not create new post on zsh]]></title>
    <link href="http://weekwood.github.com/2013/08/10/octopress-can-not-create-new-post-on-zsh/"/>
    <updated>2013-08-10T13:25:00+08:00</updated>
    <id>http://weekwood.github.com/2013/08/10/octopress-can-not-create-new-post-on-zsh</id>
    <content type="html"><![CDATA[<p>执行：$ rake new_post[&#8220;arch-linux-reinstall-glibc.markdown&#8221;]</p>

<p>报错：zsh: no matches found: new_post[arch-linux-reinstall-glibc]</p>

<p>原因：zsh中若出现‘*’, ‘(’, ‘|’, ‘&lt;’, ‘[’, or ‘?’符号，则将其识别为查找文件名的通配符</p>

<p>快速解决：用引号括起来$ rake &#8220;new_post[arch-linux-reinstall-glibc.markdown]&#8221;</p>

<p>彻底解决：取消zsh的通配(GLOB), 在.zshrc中加入alias rake=&#8221;noglob rake&#8221;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XcodeIncrement build number]]></title>
    <link href="http://weekwood.github.com/2013/08/10/xcodeincrement-build-number/"/>
    <updated>2013-08-10T12:12:00+08:00</updated>
    <id>http://weekwood.github.com/2013/08/10/xcodeincrement-build-number</id>
    <content type="html"><![CDATA[

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if [ $CONFIGURATION == Release ]; then
</span><span class='line'>    echo "Bumping build number..."
</span><span class='line'>    plist=${PROJECT_DIR}/${INFOPLIST_FILE}
</span><span class='line'>
</span><span class='line'># increment the build number (ie 115 to 116)
</span><span class='line'>    buildnum=$(/usr/libexec/PlistBuddy -c "Print CFBundleVersion" "${plist}")
</span><span class='line'>    if [[ "${buildnum}" == "" ]]; then
</span><span class='line'>        echo "No build number in $plist"
</span><span class='line'>        exit 2
</span><span class='line'>    fi
</span><span class='line'>
</span><span class='line'>    buildnum=$(expr $buildnum + 1)
</span><span class='line'>    /usr/libexec/Plistbuddy -c "Set CFBundleVersion $buildnum" "${plist}"
</span><span class='line'>    echo "Bumped build number to $buildnum"
</span><span class='line'>
</span><span class='line'>else
</span><span class='line'>    echo $CONFIGURATION " build - Not bumping build number."
</span><span class='line'>fi</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA['Hello Ruby 2 -- Ruby 2.0安装']]></title>
    <link href="http://weekwood.github.com/2013/03/13/hello-ruby-2/"/>
    <updated>2013-03-13T17:00:00+08:00</updated>
    <id>http://weekwood.github.com/2013/03/13/hello-ruby-2</id>
    <content type="html"><![CDATA[<p>更新博客才发现因为换了硬盘的关系 <a href="http://octopress.org/">octopress</a> 不能使用了所以顺手更新下Ruby 2.0</p>

<p>使用了 <a href="https://rvm.io/">RVM</a> 以及 <a href="http://mxcl.github.com/homebrew/">Homebrew</a></p>

<p>首先,我们需要安装一些依赖库</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew install autoconf
</span><span class='line'>$ brew install pkg-config
</span><span class='line'>$ brew install libyaml
</span><span class='line'>$ brew install readline
</span><span class='line'>$ brew install libxml2
</span><span class='line'>$ brew install libxslt</span></code></pre></td></tr></table></div></figure>




<!--more-->


<p>不用担心会有一些遗漏或者一些已经安装过的依赖,当你运行下面的命令的时候你会发现你依然需要什么</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rvm install 2.0.0</span></code></pre></td></tr></table></div></figure>


<p>接下来</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rvm use ruby-2.0.0</span></code></pre></td></tr></table></div></figure>


<h3>Ruby2 以及Rails</h3>

<p>Ruby2.0 可以完全支持Rails3 目前还没发现有什么问题</p>

<p><strong>Enjoy!</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode shortcuts]]></title>
    <link href="http://weekwood.github.com/2013/03/05/xcode-shortcuts/"/>
    <updated>2013-03-05T23:00:00+08:00</updated>
    <id>http://weekwood.github.com/2013/03/05/xcode-shortcuts</id>
    <content type="html"><![CDATA[<p>换了机械键盘在享受打字快感的时候,也面临着难以控制触摸板的烦恼,也就是我整理快捷键的初衷.
善用快捷键是提升效率的有效方式.</p>

<p>⌘   (Command)</p>

<p>⌃   (Control)</p>

<p>⌥   (Option)</p>

<p>⇧   (Shift)</p>

<h3>全局搜索</h3>

<p>如果你只想学一个快捷键的话这个足以.</p>

<p>⌃ + ⌘ + /  - Search help</p>

<!-- more -->


<h3>文本编辑</h3>

<h4>行移动</h4>

<p>⌥ + ⌘ + [ - Move Line Up</p>

<p>⌥ + ⌘ + ] - Move Line Down</p>

<h4>全选编辑</h4>

<p>⇧ + ⌘ + e - Edit All in Scope</p>

<h4>Placeholder跳转</h4>

<p>⌃ + / - Jump to next placeholder</p>

<p>⌃ + ⇧ + / - Jump to previous placeholder</p>

<h4>格式化</h4>

<p>⌃ + i - Re-indent code</p>

<p>选择你要格式化的行然后执行这个命令,you are all set</p>

<h3>Debuggeging</h3>

<h4>设置断点</h4>

<p>⌘ + \ - Add Breakpoint at Current Line</p>

<p>⌘ + \ - Remove Breakpoint at Current Line</p>

<h4>清空debugger 窗口</h4>

<p>⌘ + k - Clear Console</p>

<h3>文件</h3>

<h4>快速打开</h4>

<p>⇧ + ⌘ + o - Open Quickly</p>

<p>支持查询模糊搜索以及行搜索</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mobile site with nginx]]></title>
    <link href="http://weekwood.github.com/2013/01/29/mobile-site-with-nginx/"/>
    <updated>2013-01-29T23:57:00+08:00</updated>
    <id>http://weekwood.github.com/2013/01/29/mobile-site-with-nginx</id>
    <content type="html"><![CDATA[<p>整理下如何利用nginx让移动终端用户访问mobile site.</p>

<p>需求类似如此:</p>

<ul>
<li>访问 <code>mysite.com</code> 或者 <code>www.mysite.com</code> 用户看到的是移动版本</li>
<li>提供从移动版本到原始版本的转换</li>
<li>可以轻松的返回移动版本</li>
<li>提供移动域名<code>m.mysite.com</code></li>
<li>可以在浏览器上测试移动版页面</li>
<li>提供cache支持</li>
<li>&#8230;</li>
</ul>


<!--More-->


<h3>Nginx主站配置</h3>

<div><script src='https://gist.github.com/5137721.js?file=gistfile1.nginxconf'></script>
<noscript><pre><code>server {  
  listen 80;
  server_name www.mysite.com;

  root /path/to/main_site;
  # ...

  location / {
    proxy_set_header X-Real-IP $remote_addr;
    # ...

    if ($http_user_agent ~* &#39;(iPhone|iPod)&#39;) {
      set $iphone_request &#39;1&#39;;
    }
    if ($http_cookie ~ &#39;iphone_mode=full&#39;) {
      set $iphone_request &#39;&#39;;
    }
    if ($iphone_request = &#39;1&#39;) {
      rewrite ^.+ http://m.mysite.com$uri;
    }

    # serve cached pages ...

    if (!-f $request_filename) {
      proxy_pass http://app_server;
      break;
    }
  }
}</code></pre></noscript></div>


<h3>Nginx移动站配置</h3>

<div><script src='https://gist.github.com/5137721.js?file=gistfile2.nginxconf'></script>
<noscript><pre><code>upstream m_app_server {  
  server 0.0.0.0:3001;
}

server {  
  listen 80;
  server_name m.mysite.com;

  root /path/to/mobile_site;
  # ...

  location / {
    proxy_set_header X-Real-IP $remote_addr;
    # ...

    if ($http_user_agent ~* &#39;(iPhone|iPod)&#39;) {
      set $iphone_request &#39;1&#39;;
      set $iphone_path_prefix &#39;/iphone&#39;;
    }
    if ($uri ~ ^/iphone.*$) {
      set $iphone_path_prefix &#39;&#39;;
    }
    if ($uri ~ &#39;(images|stylesheets|javascripts|\.css|\.js|\.ico|\.gif|\.jpg|\.png)&#39;) {
      set $iphone_path_prefix &#39;&#39;;
    }
    if ($iphone_request = &#39;1&#39;) {
      rewrite (.*) $iphone_path_prefix$1;
    }

    # serve cached pages ...

    if (!-f $request_filename) {
      proxy_pass http://m_app_server;
      break;
    }
  }
}</code></pre></noscript></div>


<h3>cookie 支持</h3>

<div><script src='https://gist.github.com/5137721.js?file=gistfile3.js'></script>
<noscript><pre><code>function createCookie(name, value, days, domain, path) {  
  var expires = &#39;&#39;;
  if (days) {
    var d = new Date();
    d.setTime(d.getTime() + (days*24*60*60*1000));
    expires = &#39;; expires=&#39; + d.toGMTString();
  }
  domain = domain ? &#39;; domain=&#39; + domain : &#39;&#39;;
  path = &#39;; path=&#39; + (path ? path : &#39;/&#39;);
  document.cookie = name + &#39;=&#39; + value + expires + path + domain;
}

function readCookie(name) {  
  var n = name + &#39;=&#39;;
  var cookies = document.cookie.split(&#39;;&#39;);
  for (var i = 0; i &amp;lt; cookies.length; i++) {
    var c = cookies[i].replace(/^\s+/, &#39;&#39;);
    if (c.indexOf(n) == 0) {
      return c.substring(n.length);
    }
  }
  return null;
}

function eraseCookie(name, domain, path) {  
  setCookie(name, &#39;&#39;, -1, domain, path);
}</code></pre></noscript></div>


<h3>移动到主站跳转</h3>

<div><script src='https://gist.github.com/5137721.js?file=gistfile4.html'></script>
<noscript><pre><code>&lt;a href=&quot;http://www.mysite.com&quot; onclick=&quot;createCookie(&#39;iphone_mode&#39;, &#39;full&#39;, (0.25/24), &#39;mysite.com&#39;)&quot;&gt;  
  View full site
&lt;/a&gt;
</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一些程序员网站]]></title>
    <link href="http://weekwood.github.com/2013/01/27/yi-xie-cheng-xu-yuan-wang-zhan/"/>
    <updated>2013-01-27T22:45:00+08:00</updated>
    <id>http://weekwood.github.com/2013/01/27/yi-xie-cheng-xu-yuan-wang-zhan</id>
    <content type="html"><![CDATA[<p>整理了下经常去的一些网站，一些参考吧。</p>

<h4><a href="https://github.com/">Github</a>:</h4>

<p>目前最活跃的开源社区,每天要花很多时间在这里浏览一些的东西,学习源码.</p>

<h4><a href="http://stackoverflow.com/">stackoverflow</a>:</h4>

<p>技术社区</p>

<h4><a href="http://www.raywenderlich.com/">raywenderlich</a>:</h4>

<p>有很多的iOS的教程，值得学习，网站可以购买<strong>《iOS 6 By Tutorials》</strong>版本书籍，很不错</p>

<!-- more -->


<h4><a href="http://maniacdev.com/">maniacdev</a>:</h4>

<p>不错的网站更新很快收集了很多iOS相关的教程和最新的UI 控件推荐。个人比较喜欢里面有一个专门的收集了很多cocos2d的开源游戏。</p>

<h4><a href="http://www.36kr.com/">36kr</a>:</h4>

<p>关注互联网创业最好的新闻网站</p>

<h4><a href="http://techcrunch.com/">TechCrunch</a>:</h4>

<p>美国著名的互联网资讯更新极快</p>

<h4><a href="http://www.aqee.net/">外刊 IT 评论</a>:</h4>

<p>很有意思的咨询网站</p>

<h4><a href="http://www.zhihu.com">知乎</a>:</h4>

<p>能学习到很多东西的地方，也有一些blog收集的相关话题。
<a href="http://www.zhihu.com/question/19618652">http://www.zhihu.com/question/19618652</a>
<a href="http://www.zhihu.com/question/19550915">http://www.zhihu.com/question/19550915</a>
<a href="http://www.zhihu.com/question/20072641">http://www.zhihu.com/question/20072641</a></p>

<p>待续。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[About CocoaPods]]></title>
    <link href="http://weekwood.github.com/2013/01/14/about-cocoapods/"/>
    <updated>2013-01-14T14:18:00+08:00</updated>
    <id>http://weekwood.github.com/2013/01/14/about-cocoapods</id>
    <content type="html"><![CDATA[<h3>什么是CocoaPods</h3>

<p>每个做iOS开发的人或多或少会用到一些开源的源代码。我想你们也会有何我一样的经历</p>

<ol>
<li>开源文件复制道项目中</li>
<li>添加依赖的系统库</li>
<li>手动管理依赖库更新</li>
</ol>


<p>这简直是地狱！也许你和我一样需要CocoaPods, 它是一个负责管理iOS第三方开源代码的工具。</p>

<p>我们不在需要执行这些事情仅仅</p>

<blockquote><p>$ pod install</p></blockquote>

<p>它会下载podfile 文件中的依赖库。</p>

<p>就是这么简单</p>

<!-- more -->


<h3>为什么需要这个</h3>

<p>并不是只有iOS有这个依赖惯例工具，他们同时也存在于</p>

<ul>
<li>java: maven</li>
<li>Ruby: gems
…</li>
</ul>


<p>语言发展到一定程度必然出现的。</p>

<h3>CocoaPods安装</h3>

<p>CocoaPods 是一个Ruby的Gem，而Mac自带Ruby，所以我们仅仅需要在Terminal下运行</p>

<blockquote><p>$ [sudo] gem install cocoapods</p>

<p>$ pod setup</p></blockquote>

<p>现在你可以开始使用了~</p>

<h4><strong>Search</strong></h4>

<p>在Terminal 下运行  pod search + ‘GitHub’上的代码库名称就可以的到你想要的，例如 pod search nimbus</p>

<h4><strong>Podfile</strong></h4>

<p>在iOS项目下建立Podfile</p>

<blockquote><p>$ vi Podfile</p>

<p>platform :ios</p>

<p>pod &#8216;JSONKit&#8217;, &#8216;~> 1.4&#8217;</p>

<p>pod &#8216;Reachability’, &#8216;~> 3.0.0&#8217;</p></blockquote>

<p>然后</p>

<blockquote><p>$ pod install</p></blockquote>

<p>打开看看吧 你想要的依赖已经整装待发了！</p>

<h4><strong>加入Pod</strong></h4>

<p>并不是所有时候都可以找到你想要的库,这个时候你需要：</p>

<ol>
<li>fork一份<a href="https://github.com/CocoaPods/Specs">CocoaPods</a></li>
<li><p>到你的项目开设对应的开源目录，编辑podspec，然后执行</p>

<blockquote><p>pod spec lint yours.podspec</p></blockquote></li>
<li><p>然后pull request，CocoaPods团队会审核</p></li>
</ol>


<h3>分享一个UI分享网站</h3>

<p><a href="http://www.cocoacontrols.com/">CocoaControl</a>这里更新很快而且大部分的都CocoaPods</p>

<h4><strong>Enjoy</strong></h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Arc+blocks+llvm4 的时代2/3]]></title>
    <link href="http://weekwood.github.com/2013/01/11/arc-plus-blocks-plus-llvm4-de-shi-dai-2-slash-3/"/>
    <updated>2013-01-11T14:10:00+08:00</updated>
    <id>http://weekwood.github.com/2013/01/11/arc-plus-blocks-plus-llvm4-de-shi-dai-2-slash-3</id>
    <content type="html"><![CDATA[<h1>Object Literals</h1>

<h3>NSNumber Literals</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//NSNumber Creation</span>
</span><span class='line'><span class="n">NSNumber</span> <span class="o">*</span><span class="n">value</span><span class="p">;</span>
</span><span class='line'><span class="n">value</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithChar:</span><span class="sc">&#39;X&#39;</span><span class="p">];</span>
</span><span class='line'><span class="n">value</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithInt:</span><span class="mi">12345</span><span class="p">];</span>
</span><span class='line'><span class="n">value</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithUnsignedLong:</span><span class="mi">12345</span><span class="n">ul</span><span class="p">];</span>
</span><span class='line'><span class="n">value</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithLongLong:</span><span class="mi">12345l</span><span class="n">l</span><span class="p">];</span>
</span><span class='line'><span class="n">value</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithFloat:</span><span class="mf">123.45f</span><span class="p">];</span>
</span><span class='line'><span class="n">value</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithDouble:</span><span class="mf">123.45</span><span class="p">];</span>
</span><span class='line'><span class="n">value</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithBool:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//NSNumber Literals</span>
</span><span class='line'><span class="n">NSNumber</span> <span class="o">*</span><span class="n">value</span><span class="p">;</span>
</span><span class='line'><span class="n">value</span> <span class="o">=</span> <span class="sc">@&#39;X&#39;</span><span class="p">;</span>
</span><span class='line'><span class="n">value</span> <span class="o">=</span> <span class="err">@</span><span class="mi">12345</span><span class="p">;</span>
</span><span class='line'><span class="n">value</span> <span class="o">=</span> <span class="err">@</span><span class="mi">12345</span><span class="n">ul</span><span class="p">;</span>
</span><span class='line'><span class="n">value</span> <span class="o">=</span> <span class="err">@</span><span class="mi">12345l</span><span class="n">l</span><span class="p">;</span>
</span><span class='line'><span class="n">value</span> <span class="o">=</span> <span class="err">@</span><span class="mf">123.45f</span><span class="p">;</span>
</span><span class='line'><span class="n">value</span> <span class="o">=</span> <span class="err">@</span><span class="mf">123.45</span><span class="p">;</span>
</span><span class='line'><span class="n">value</span> <span class="o">=</span> <span class="err">@</span><span class="n">YES</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h3>NSArray Literals</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSMutableArray</span> <span class="o">*</span><span class="n">mArr</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableArray</span> <span class="nl">arrayWithObjects:</span>
</span><span class='line'>    <span class="n">v1</span><span class="p">,</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithUnsignedInt:</span><span class="mi">255</span><span class="n">u</span><span class="p">],</span>
</span><span class='line'><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">mArr</span> <span class="nl">replaceObjectAtIndex:</span><span class="mi">1</span> <span class="nl">withObject:</span><span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithChar:</span><span class="sc">&#39;z&#39;</span><span class="p">]];</span>
</span><span class='line'>
</span><span class='line'><span class="n">NSMutableArray</span> <span class="o">*</span><span class="n">mArr</span> <span class="o">=</span> <span class="p">[</span><span class="err">@</span><span class="p">[</span><span class="n">v1</span><span class="p">,</span> <span class="err">@</span><span class="mi">255</span><span class="n">U</span><span class="p">]</span> <span class="n">mutableCopy</span><span class="p">];</span>
</span><span class='line'><span class="c1">// array/dict literals are immutable so we need a mutable copy</span>
</span><span class='line'><span class="n">ict</span> <span class="n">literals</span> <span class="n">are</span> <span class="n">immutable</span> <span class="n">so</span> <span class="n">we</span> <span class="n">need</span> <span class="n">a</span> <span class="n">mutable</span> <span class="n">copy</span>
</span><span class='line'><span class="n">mArr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="sc">@&#39;z&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>NSDictionary Literals</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSMutableDictionary</span> <span class="o">*</span><span class="n">mDict</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableDictionary</span>
</span><span class='line'>    <span class="nl">dictionaryWithObjectAndKeys:</span><span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithUTF8String:</span><span class="s">&quot;Hello&quot;</span><span class="p">,</span> <span class="n">k1</span><span class="p">,</span>
</span><span class='line'>                                <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithUTF8String:</span><span class="s">&quot;World&quot;</span><span class="p">],</span><span class="n">k2</span><span class="p">,</span>
</span><span class='line'><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">mDict</span> <span class="nl">setObject:</span><span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithUTF8String:</span><span class="s">&quot;Ciao&quot;</span> <span class="nl">forKey:</span><span class="n">k1</span><span class="p">]];</span>
</span><span class='line'>
</span><span class='line'><span class="n">NSMutableDictionary</span> <span class="o">*</span><span class="n">mDict</span> <span class="o">=</span> <span class="p">[</span> <span class="err">@</span><span class="p">{</span>
</span><span class='line'>    <span class="s">@&quot;key1&quot;</span> <span class="o">:</span> <span class="s">@&quot;Hello&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">@&quot;key2&quot;</span> <span class="o">:</span> <span class="s">@&quot;World&quot;</span>
</span><span class='line'><span class="p">}</span> <span class="n">mutableCopy</span><span class="p">];</span>
</span><span class='line'><span class="n">mDict</span><span class="p">[</span><span class="s">@&quot;key1&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;@Ciao&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[API Design 译文]]></title>
    <link href="http://weekwood.github.com/2012/12/30/api-design-yi-wen/"/>
    <updated>2012-12-30T00:02:00+08:00</updated>
    <id>http://weekwood.github.com/2012/12/30/api-design-yi-wen</id>
    <content type="html"><![CDATA[<p>本文来源于<a href="http://mattgemmell.com/2012/05/24/api-design/">matt gemmell</a>困于自己英语水平问题， 若有错误见谅。</p>

<p>One of the development tasks I do most often is designing the API for a reusable component. The components are usually for iOS (though sometimes they’re for OS X), and are invariably GUI controls or views of some kind.</p>

<p>我最常做的工作之一就是设计可重用的组件，这些组件一般用于iOS（一些时候也用在OS X）的GUI控件或者某些视图上。</p>

<p>I’ve designed literally dozens of component APIs over the years, including for clients like Apple, and I’ve learned quite a bit about the process. I periodically release open source components too, and the feedback I’ve had has helped me put together a set of guidelines for API design that I’d like to share with you.</p>

<p>多年来我设计了几十个API组件都已经成功出现在了大家的视线里，比如一些苹果风格的客户端，并且我对这个开发过程有了一定的了解。我定期也会发布一些开源的组件，并且从中获得了很多反馈让我受益良多，与此同时我整理了一套API设计的指南，现在我将成果分享给大家。</p>

<!-- more -->


<p>This is an important topic, whether you’re an open source contributor, or working as part of a team on a large app, or just creating your own software. Just like the first launch experience of an app, your API is part of the first impression that a developer will have with your code, and will have a huge impact on whether they use it or throw it away.</p>

<p>这是一个很重要的话题，不论你致力于开源，与其他成员一起完成一个大型软件，或者独自创作。就像第一次打开一个应用程序的体验，你的API将是开发者对你的代码的第一印象，他们是否使用它，或者把它扔掉，等都产生巨大的影响。</p>

<p>APIs are UX for developers. I’ve always been surprised that there isn’t more material written about this aspect of our work, in a way that’s specific to the popular platforms.</p>

<p>APIs 是对开发者的交互设计，我时常感到惊讶为什么没有很多资料提到这方面的工作，它是非常受欢迎的。</p>

<p>As we go through some guidelines, I’m going to use my most recently released open source GUI component, <a href="http://mattgemmell.com/2012/05/14/mgtilemenu/">MGTileMenu</a>, as an example where necessary. You can read <a href="http://mattgemmell.com/2012/05/14/mgtilemenu/">all about MGTileMenu here</a> first, if you like.</p>

<p>就像我们常看到的指南那样，让我来用我最近发布的开源组件<a href="http://mattgemmell.com/2012/05/14/mgtilemenu/">MGTileMenu</a>当做例子来描述，你可以先阅读&#8221;MGTileMenu&#8221;<a href="http://mattgemmell.com/2012/05/14/mgtilemenu/">MGT</a>来了解他，当然如果你愿意的话。</p>

<h3><strong>素质（Desirable qualities）</strong></h3>

<p>API design is very much like user interface and user experience design. Your target audience has different needs and characteristics, but they’re still humans who are looking to get a job done. As with a friendly, usable app UI, you’re still trying to make your API:</p>

<p>API设计和用户界面设计以及用户体验设计非常之相像。你的目标用户总是有着不同的需求以及特点，但是他们最终目的依然是完成工作。作为一个友好的可用性高的应用UI，你需要尝试让你的API:</p>

<ul>
<li>直观（Intuitive）</li>
<li>灵活 Forgiving</li>
<li>松耦合 Frictionless</li>
</ul>


<p>As with any piece of software designed for use by humans, we have to think about the use cases. We have to make the most commonly-needed stuff easy, without undue configuration. Default behaviours should be useful as-is, and should be sensibly chosen. The software should be discoverable, and should allow the user to generalise from known paradigms. It’s all exactly the same set of principles as when we’re creating UIs.</p>

<p>以人为本的软件，我们需要思考实际用例，让一些常用的东西不需要过多的配置就可以容易使用。而你设计的默认行为应该是最实用最明智的那个。软件的功能应该是容易发现的，并且可以让用户从已知的行为模式中概括出来。这套准则应该和创建UI的时候完全一致。</p>

<h2><strong>开发接口（The developer interface）</strong></h2>

<p>Components are interacted with by the developer using four primary explicit means:</p>

<p>Components是通过下四种方式和开发者互动:</p>

<ul>
<li>The class interface: its exposed properties and methods.</li>
<li>The delegate protocol, where relevant.</li>
<li>The data-source protocol, where appropriate.</li>
<li>Any provided notifications.</li>
</ul>


<p>We have to design each of those, judiciously and deliberately, for human use. There are two key questions when you’re thinking about the API:</p>

<p>以人为本的设计我们需要谨慎的考虑，当你思考API设计的时候有2个关键的问题：</p>

<ul>
<li><strong>What is the control?</strong></li>
</ul>


<p>This influences the interface and convenience methods. Is it a button? A slider? Your interface is obvious. Your convenience methods will follow the standard semantics of the control.</p>

<p>这个问题会影响界面和接口方法。它是一个按钮吗？一个滑块？您的接口是否可见。您的方法将遵循的标准语义的control。</p>

<ul>
<li><strong>What is the control like?</strong></li>
</ul>


<p>This influences the delegate and/or data-source model and notifications. If it’s a new type of control, is it essentially very similar to something else? An outline view is a linear table. A calendar widget is a date-picker. A collection of commands presented with a unified presentation is a menu.</p>

<p>这个问题会影响委托和/或数据源模型和通知。如果它是一个新型的control，它本质上是非常相似的别的东西吗？大纲视图是​​一个线性表。日历小工具是一个日期选择器。用一个统一的命令集合就是一个菜单。</p>

<p>Our core goal is consistency with existing components and models, so that we can turn an unfamiliar control into something the developer already understands. Use standard APIs, models, and patterns wherever possible (and that’s almost always). Familiarity and intuitiveness are just as important at code level as they are for the end user.</p>

<p>我们的核心目标是与现有的组件和模型的保持一致，因此，我们可以把一个陌生的control，变成开发人员已经知道的东西。尽可能的使用标准的API，模型和模式，因为熟悉和直观对用户来说也相当重要。</p>

<p>Let’s look at the four components of the component API mentioned above.</p>

<p>让我们来看下由以上四点构成的API组件。</p>

<h3><strong>类接口Class interface</strong></h3>

<p>Here’s <a href="https://github.com/mattgemmell/MGTileMenu/blob/master/MGTileMenu/MGTileMenuController.h">the interface file for MGTileMenu</a>.</p>

<p>Before we even start talking about the specifics of the interface, we have a couple of over-arching rules:</p>

<p>在我们讨论具体的接口之前，这有一些涵盖范围比较广泛的规则：</p>

<h3><strong>Rule 1: 使用方言（Use the local dialect）</strong></h3>

<p>One the most common mistakes I see in API design is the use of foreign conventions. APIs belong to a platform and a developer ecosystem. You simply can’t use whatever idioms and architectures you’re used to from a different platform; to do so is to pollute your current codebase and to damage the productivity of your fellow developers.</p>

<p>我所看到最常见的错误是API的设计利用了外来的约定。APIs 属于固定平台和固定的开发者生态系统。你根本无法使用任何习语和你用过的其他平台的架构，这样做会污染您当前的代码库，并​​对其他开发人员的效率造成损害。</p>

<p>Learn your target platform’s conventions before coding. For example, on iOS or OS X, don’t use exceptions for control flow. Name your methods in an appropriate manner (which usually means sufficiently verbose, but should also of course be sufficiently succinct).</p>

<p>在coding之前要了解你目标平台的约定，比如，在iOS 或者 OS X，不使用异常对待control的流程  。以适当的方式命名你的方法（通常指有足够详细，但也应该有足够的简洁）。</p>

<p>Learn what a protocol is, and a delegate, and a category. Use that terminology throughout your code. Learn the relevant naming schemes for constructors and destructors. Obey native memory management rules. The vocabulary and the grammar are indivisible, and you’re either developing for a given platform or you’re not.</p>

<p>了解协议，和委托，类别分别是什么。在你的代码中使用他们。学习相关的构造函数和析构函数的​​命名方案。请遵守内存管理规则。词汇和语法是不可分割的，你要么发展为一个固定的的平台，或者你跨平台。</p>

<h3><strong>Rule 2: 设计解耦（Design decoupled）</strong></h3>

<p>Any component should be designed such that it’s not coupled to the project you created it for, and if it’s a GUI control or view, it should at least display something by default. Use the existing framework classes as a guide, and maintain loose coupling with delegate protocols, well-designed/named API methods and notifications where appropriate.</p>

<p>任何component的设计应该没有连接到你当前创建的项目，如果他是一个GUI control或者一个视图，它应该默认显示一些东西。使用现有的框架作为一个指南,与委托协议,精心设计的/命名的API方法和通知在适当的地方保持松耦合。</p>

<p>An obvious but very effective way to do this is to create a new project for each component, and develop the component literally in isolation. Force yourself to use your own API. Stay away from the temptation of tying unrelated classes together. Start as you mean to go on.</p>

<p>一个很明显的，但非常有效的方式，是每次为你的component创建一个项目，并逐渐的隔离开发component。强迫自己使用自己的API。远离无关的类。</p>

<p>With that said, let’s talk about the class interface proper. Initialisation methods are one of the most important parts of the interface, because they’re how people get started with your component. Your class will have certain required settings for initial configuration. So, an obvious rule:</p>

<p>接下来，让我们来适当谈谈类的接口。初始化方法的接口中最重要的部分之一，因为他们是人们如何开始使用您的组件。你的类将有一定的初始配置所需的设置。所以，一个明显的规律：</p>

<h3><strong>Rule 3: 必须设置初始化参数（Required settings should be initializer parameters）</strong></h3>

<p>If something needs to be set, don’t wait for it - require it up-front, immediately, and return nil if you don’t get something acceptable.</p>

<p>如果有什么需要设置的，不要等待 -需要它了就去做，如果你没有得到的东西的立即返回nil。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">initWithDelegate:</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">MGTileMenuDelegate</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">theDelegate</span><span class="p">;</span> <span class="c1">// required parameter; cannot be nil.</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Rule 4: <strong>允许访问初始化参数（Allow access to initializer parameters）</strong></h3>

<p>This is a corollary to the previous rule: remember not to just swallow those parameters. Give access to them via properties, and note if they might have been massaged in any way (sanitised, or otherwise modified).</p>

<p>这个前一个结果的必然结果: 记住不要仅仅传入参数，应该可以通过属性或者赋值来访问他们，如果他们可以通过任何方式来一场“按摩”（修改，重写等）</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">weak</span><span class="p">,</span> <span class="n">readonly</span><span class="p">)</span> <span class="kt">id</span><span class="o">&lt;</span><span class="n">MGTileMenuDelegate</span><span class="o">&gt;</span> <span class="n">delegate</span><span class="p">;</span> <span class="c1">// must be specified via initializer method.</span>
</span></code></pre></td></tr></table></div></figure>


<p>These previous two examples raise a further general point.</p>

<p>前两个例子阐述了这个观点。</p>

<h3><strong>Rule 5: 注释你的header文件 Comment your header files (including defaults)</strong></h3>

<p>Realistically, you won’t always provide separate, standalone documentation for a component. If you don’t provide documentation, your .h files (and demo app) are your docs. They should be suitably written, and by ‘suitably’ I mean:</p>

<p>实际上,你不总为component提供单独的文档。如果你不提供文档，你的.h文件（包括demo app）就是你的文档。他们应该适当的描述，我的意思是:</p>

<ul>
<li>Sufficiently detailed, but no more so. Be succinct.</li>
<li><p>For professionals. Assume things that are safe to assume. Don’t waffle.</p></li>
<li><p>足以描述，但是不是特别多，要简洁。</p></li>
<li>一切是提供给专业人士，所以适当的描述别描述无关的事情。</li>
</ul>


<p>Particularly, you should briefly note default values beside properties or accessors; it’s much easier to scan those in the header file than to try to locate your initialisation code in the implementation.</p>

<p>特别是,你应该简要注释在属性或访问器旁边;头文件扫描比在初始化实例的时候更容易。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">)</span> <span class="n">CGGradientRef</span> <span class="n">tileGradient</span><span class="p">;</span> <span class="c1">// gradient to apply to tile backgrounds (default: a lovely blue)</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSInteger</span> <span class="n">selectionBorderWidth</span><span class="p">;</span> <span class="c1">// default: 5 pixels</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">)</span> <span class="n">CGGradientRef</span> <span class="n">selectionGradient</span><span class="p">;</span> <span class="c1">// default: a subtle white (top) to grey (bottom) gradient</span>
</span></code></pre></td></tr></table></div></figure>


<h3><strong>Rule 6: 三行内运行起来 Get up and running in 3 lines</strong></h3>

<p>Your class should be designed so that it requires minimal code to integrate (delegate/data-source protocol included, about which more later). Excluding delegate methods, you should aim to make it usable at least for testing purposes with only 3 lines of code.</p>

<p>你的类应该是这样设计的,它需要最少的代码来集成(包括委托/数据源)。你的目标应该是只用3行代码使达到测试目的，当然这一切不包括委托方法。</p>

<p>Those lines are:</p>

<p>这几行应该是:</p>

<ul>
<li>Instantiate it.</li>
<li>Basically configure, so it will show and/or do something.</li>
<li><p>Display or otherwise activate it.</p></li>
<li><p>实例化</p></li>
<li>基本配置</li>
<li>显示</li>
</ul>


<p>That should be it. Anything substantially more onerous is a code smell. Here are the relevant lines from MGTileMenu’s demo app:</p>

<p>就是这样，这里是<a href="http://mattgemmell.com/2012/05/14/mgtilemenu/">MGTileMenu</a>中相应的代码:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// Instantiate. 初始化</span>
</span><span class='line'><span class="n">tileController</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MGTileMenuController</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithDelegate:</span><span class="n">self</span><span class="p">];</span>
</span><span class='line'><span class="c1">// Configure. 配置</span>
</span><span class='line'><span class="n">tileController</span><span class="p">.</span><span class="n">dismissAfterTileActivated</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span> <span class="c1">// to make it easier to play with in the demo app.</span>
</span><span class='line'><span class="c1">// Display. 显示</span>
</span><span class='line'><span class="p">[</span><span class="n">tileController</span> <span class="nl">displayMenuCenteredOnPoint:</span><span class="n">loc</span> <span class="nl">inView:</span><span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h3><strong>Rule 7: 臃肿的demo意味着不合格的component A fat demo usually means a broken component</strong></h3>

<p>Another corollary: the size of your demo harness is a quality metric for your component, where smaller is better. Demo harnesses/code should be as small and thin as possible (making suitable allowances for demos that aim to explore all of a component’s customisation or functionality).</p>

<p>另一个推论：您的demo的大小是衡量你component质量的标准，其值越小越好。Demo/Code 应该尽可能的小而薄的（用于演示，旨在描述所有组件的定制或功能）。</p>

<p>The core required code to turn an empty Xcode app template into a demo of your app should be minimised. It’s not OK to required copy-pasted boilerplate to get your component working, and having an example of it in your demo isn’t an excuse.</p>

<p>核心思想是当你的代码从你的空的xcode项目模板到你的demo中应该保持最小化的修改。这并不是一个好的借口当你需要复制粘贴demo来让你的component运行。</p>

<h3><strong>Rule 8: 预测定制化的可能性 Anticipate customisation scenarios</strong></h3>

<p>My standard rule for apps is don’t give the user options. Choose sensible defaults to fit the majority, and skip the Preferences window. Good software, after all, is opinionated.</p>

<p>我的标准规则的应用程序是不给用户选择。选择合理的默认值，以适应大多数情况，并跳过“首选项”窗口。我固执己见的认为好的软件应该如此。</p>

<p>The situation is a bit different with components, because the scenarios of use aren’t as clear-cut. You can certainly make a component that only fits one specific situation, but usually we want some flexibility. You never know exactly how another developer is going to use your component, so you have to build in some generality.</p>

<p>目前的情况是应该有一些不同的components，因为在使用目的不明确的情况下。你当然可以使一个components只适合一个特定的情况，但通常我们需要有一定的灵活性。你永远不知道究竟另一名开发人员将如何使用您的components，所以你必须建立在一些一般性。</p>

<p>It’s important to choose your customisation points carefully. It’s particularly important to consider dependencies - not in the compiling/linking sense, but rather the logical relationships between types of customisation. I approach this by trying not to think of customisation at the instance-variable level, but rather at the “aspect” level. What aspects of your component do you want to allow customisation of? Then you work out what specific properties to expose.</p>

<p>一个非常重要的事情就是小心的选择可定制的地方。这是特别重要的考虑依赖关系——而不是在编译/链接意义上,而是逻辑关系类型的定制。我的方法通过努力不去想定制的实例变量层面,而是在“方面”水平。您的组件的哪些方面你想让定制的?然后你找出特定的属性来公开。</p>

<p>It’s easy to cripple a certain type of customisation by not exposing sufficient configuration points. Some examples:</p>

<p>这很容易削弱某种类型的自定义的不足。一些例子：</p>

<ul>
<li>Don’t expose width and height without considering corner radius too.</li>
<li>Don’t expose background colour without highlighted background colour.</li>
<li><p>Don’t expose size without spacing.</p></li>
<li><p>不公开的宽度和高度也没有考虑圆角半径。</p></li>
<li>不公开背景颜色没有突出显示的背景颜色。</li>
<li>不公开大小没有间距。</li>
</ul>


<p>The specifics depend on the component, but just try to consider the relationships between properties, from the point of view of either appearance or functionality. Empathise with the developer. Be flexible, without abandoning the identity of the component.</p>

<p>具体细节取决于component,但只尝试考虑属性之间的关系,要么外观或功能。对于开发者。是需要灵活的,没有放弃身份的component。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">)</span> <span class="kt">BOOL</span> <span class="n">dismissAfterTileActivated</span><span class="p">;</span> <span class="c1">// automatically dismiss menu after a tile is activated (YES; default)</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">)</span> <span class="kt">BOOL</span> <span class="n">rightHanded</span><span class="p">;</span> <span class="c1">// leave gap for right-handed finger (YES; default) or left-handed (NO)</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSInteger</span> <span class="n">tileSide</span><span class="p">;</span> <span class="c1">// width and height of each tile, in pixels (default 72 pixels)</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSInteger</span> <span class="n">tileGap</span><span class="p">;</span> <span class="c1">// horizontal and vertical gaps between tiles, in pixels (default: 20 pixels)</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">)</span> <span class="n">CGFloat</span> <span class="n">cornerRadius</span><span class="p">;</span> <span class="c1">// corner radius for bezel and all tiles, in pixels (default: 12.0 pixels)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let common sense be your guide. Decide what options will serve 70% or so of the usage situations you can think of, and provide those options. Let your delegate methods and code structure serve the rest.</p>

<p>让常识成为你的向导。这将确定你能想到的70%左右的选项，并提供这些选项。以及您的委托方法和代码结构的其余服务。</p>

<h3><strong>Rule 9: 更多的属性，更少的actions More properties, fewer actions</strong></h3>

<p>There’s a particular pattern that keeps cropping up in components that I like - some of which are from standard frameworks, some open source from third parties, and some even my own. It’s a ratio of the number of properties (or accessors, or customisation points) on a component, to the number of “do stuff” methods (i.e. all the other stuff, from initializers to state-updating).</p>

<p>有一个特定的模式，不断出现在我喜欢的组件中 - 其中一些是从标准的框架，也有来自第三方的，有的甚至是我自己的一些开放源码的。在一个组件中属性的数量(或访问器,或定制)和“做东西”的方法(即所有其他的东西,从初始化来状态更新)有特定的比例。</p>

<p>It’s pretty much always more properties, and fewer ‘actions’ (again, that’s not actions in the Interface Builder sense). MGTileMenu has an initializer, and four actual for-public-use methods (one of which is a convenience that calls another). In terms of customisation points, it has four times as many. I think that’s a good ratio, and leads to components that are both concise in actual functionality, but also flexible in customisation.</p>

<p>它几乎总是更多的属性,和更少的action”(再一次,这不是Interface Builder中的actions)。MGTileMenu有一个初始化器,和四个实际公共使用方法。在定制中,它达到4倍多。我认为这是一个好的比率,很简洁，但也很灵活去定制的component。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">initWithDelegate:</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">MGTileMenuDelegate</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">theDelegate</span><span class="p">;</span> <span class="c1">// required parameter; cannot be nil.</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">CGPoint</span><span class="p">)</span><span class="nf">displayMenuPage:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">pageNum</span> <span class="nf">centeredOnPoint:</span><span class="p">(</span><span class="n">CGPoint</span><span class="p">)</span><span class="nv">centerPt</span> <span class="nf">inView:</span><span class="p">(</span><span class="n">UIView</span> <span class="o">*</span><span class="p">)</span><span class="nv">parentView</span><span class="p">;</span> <span class="c1">// zero-based pageNum</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">dismissMenu</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">switchToPage:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">pageNum</span><span class="p">;</span> <span class="c1">// zero-based pageNum</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<h3><strong>Rule 10: 在你的控件中使用控件 Use controls in your controls</strong></h3>

<p>A great way to simplify both the API and implementation of your component is to use existing controls in your implementation. A unified presentation doesn’t meant that you can’t build something out of pre-existing components (indeed, that’s one of the basic principles of good software engineering).</p>

<p>一个很重要的方式来简化API和实现你的component是里用已有的controls在你的实现方法。标准的表现并不意味着你不能在已有的components上创造东西。（事实上，这是一个好的软件工程师的基本准则）</p>

<p>Consider how UITableViewCell and UIButton have simple APIs because they use sub-controls such as UIImageViews and UILabels. You can, and should, do that too - and if appropriate, expose the corresponding sub-controls to keep your class interface concise and consistent.</p>

<p>仔细想想UITableViewCell 和 UIButton的简化API的方式，是因为他们使用了sub-controls 例如 UIImageViews和 UILabels。你可以也应该这么做。在适当的时候，使一些相对应的sub-controls暴露在外，这样让你的class接口简洁，一致。</p>

<p>In MGTileMenu, for example, the tiles are regular UIButtons (not even subclasses). This drastically simplified the implementation compared to drawing the tiles within a single custom view, tracking input events, and supporting accessibility.</p>

<p>在MGTileMenu中，例如，贴图是标准的UIButtons（不是子类）。这极大的简化了在单一的自定义视图中绘制块，跟踪输入事件，以及支持辅助功能。</p>

<h3><strong>Rule 11: 方便你我 Convenient for you is convenient for me</strong></h3>

<p>You’ll naturally add convenience methods during implementation, and the instinct is to keep them private. Instead, consider whether you can expose them for use by those who integrate your component into their own apps.</p>

<p>在实施过程中你会很自然的想到增加一些便利的方法，并且本能的让他私有化。相反的，应该考虑如何公开的你的component 让别人用在他们的项目中。</p>

<p>Whatever made it more convenient for you to add a method or function may apply to those developers too.</p>

<p>无论是什么使它更便于您添加一个方法或函数应该同样适用于其他的开发者。</p>

<p>For example, in MGTileMenu I created these convenience functions:</p>

<p>例如， 在MGTileMenu中 我创建了一些便捷的函数：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">CGRect</span> <span class="n">MGMinimallyOverlapRects</span><span class="p">(</span><span class="n">CGRect</span> <span class="n">inner</span><span class="p">,</span> <span class="n">CGRect</span> <span class="n">outer</span><span class="p">,</span> <span class="n">CGFloat</span> <span class="n">padding</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">CGGradientRef</span> <span class="n">MGCreateGradientWithColors</span><span class="p">(</span><span class="n">UIColor</span> <span class="o">*</span><span class="n">topColorRGB</span><span class="p">,</span> <span class="n">UIColor</span> <span class="o">*</span><span class="n">bottomColorRGB</span><span class="p">);</span> <span class="c1">// assumes colors in RGB colorspace</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first helps me shift a tile menu so that it’s fully visible within its parent view (which might be handy for another developer, if they’re providing ancillary UI related to the menu), and the second returns a Core Graphics gradient from two UIColors, which I used when setting a default background for the tiles (and another developer may find handy when implementing MGTileMenu’s delegate protocol, to give tiles custom gradients).</p>

<p>这第一个帮助我转换一个tile菜单让他可以完完全全显示在它的父视图中（这可能方便其他开发人员如果他们相关配套的UI菜单），第二个是从2个颜色中返回一个图形渐变，用在了设置默认背景的tile（另一名开发人员可能会发现方便的时候实现MGTileMenu的委托协议，并自定义渐变tile）</p>

<h3><strong>Rule 12: 魔法可以，数字就算了 Magic is OK. Numbers aren’t.</strong></h3>

<p>Sooner or later, you’ll put magic into your component. Hopefully there’ll be plenty of the Steve Jobs type of intuitive, delightful, empowering magic, but what I’m talking about is things like numbers and other values that have special meaning in your code. A common example is -1, to indicate a unique thing in a set, or a special situation.</p>

<p>迟早，你将把魔法加入到你的component中。他们将会是大量乔布斯风格的直觉，令人愉快的魔法，但是我要说的事情是在你的代码中数值或者其他的值他们都特殊的意义。一个简单的例子是-1， 在集合中是一个特殊的事情，或者一个特殊的情况。</p>

<p>It’s fine. It’s genuinely OK to do that. What’s not OK, though, is needlessly putting mysterious raw values throughout your code, and   . If you’re exposing magic, dress them up for consumption. Use #defines or a constant or something. Just make them presentable and understandable.</p>

<p>这个可以，诚实的来说也仅仅是OK，那什么是不OK，把一些不必要的神秘的原始值贯穿于你的代码中，尤其不正常的是把它暴露在API中。如果你想施展一些魔法，把他们包装起来再使用，用#defines 或者一个常量或者其他一些什么东西。让他们更像样，更容易理解。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">// Used for the page-switching tile in methods expecting a tile-number.</span>
</span><span class='line'><span class="cp">#define MG_PAGE_SWITCHING_TILE_INDEX -1</span>
</span></code></pre></td></tr></table></div></figure>


<h3><strong>委托和数据源 Delegate and data-source protocols</strong></h3>

<p>Delegate protocols are fantastic. They’re an easy, familiar and flexible way to embrace the MVC pattern, and they reinforce good habits of loose coupling and judicious API design.</p>

<p>委托协议是非常令人难以置信的功能，非常的简单，用一种常见并且灵活的方式来实现MVC 模式，同时他也是巩固了松散耦合的良好习惯以及明智了api 设计。</p>

<p>Here’s MGTileMenu’s delegate protocol.</p>

<p>这里是[MGTileMenu’s 的委托][MGTileMenu’s delegate protocol]</p>

<p>There are classic delegate and data-source protocols that we can draw on for almost any component. If you’re displaying data, the <strong>One True Data-Source Protocol</strong> is likely to be something very close to:</p>

<p>1.<strong>How many</strong> things do I have?
2.What’s the value for <strong>property Y</strong> of <strong>thing X</strong>?</p>

<p>它们是经典的委托和数据源让我们利用在几乎所有的component中。如果你想显示数据，一个真正的数据源很可能类似这样:
1.我有多少东西？
2.X的Y属性的值是多少</p>

<p>Similarly, in almost any situation, the <strong>One True Delegate Protocol</strong> is likely to take the form:</p>

<p><strong>Should</strong> this thing do that?
This thing <strong><strong>is about to</strong> do that.
This thing </strong>just did<strong> that.
This is also known as the </strong>Should<strong>, </strong>Will<strong>, </strong>Did<strong> protocol pattern, and it ties neatly in with the </strong>Will-Did** notification pattern too, about which more later.</p>

<p>同时，几乎在任何情况下，一个真正的委托需要如下这样的一个表单:
这事应该这样做?
这事要做。
这事情是这样。
这个也是已知的<strong>Should</strong>,<strong>Will</strong>,<strong>Did</strong>协议模式以及与<strong>Will-Did</strong>通知模式紧密联系在一起，</p>

<p>Let me mention something you might find controversial: I find it perfectly acceptable to conflate the delegate with the data-source (i.e. combine them into a single protocol). I do it with MGTileMenu and several other components, for example.</p>

<p>让我提出一些事情可能你会提出争议：我觉得把委托和数据源混合在一起是完全可以接受的（就是组合成一个协议）</p>

<p>I fully accept the principle of separating them, and I can think of many cases where you’d want to keep them separate. Apple keeps them separate too, generally. That’s fine.</p>

<p>我完全接受他们分开的原则,我能想到的许多情况下,您想要将它们区分开来。苹果一般也让他们分开。这个无所谓。</p>

<p>In my experience, though, in most cases it’s fine to combine them. Most people handle data-source methods and delegate methods in the same place. I’ve never had a complaint about unifying those protocols, and I can scarcely remember a situation where even existing separate protocols were handled in different places.</p>

<p>在我的经验中,尽管,在大多数情况下可以组合它们。大多数人处理数据源方法和委托方法在相同的地方。我从来没有收到投诉关于统一这些协议,我几乎不记得哪里有分开的protocols在不同的地方处理。</p>

<p>If you care about purity, or have a need to separate delegate from data-source, then obviously you should do so. I just don’t think you need to feel bad if you combine them.</p>

<p>如果你很关心纯粹，或者需要一个独立的于数据源的委托，那么很明显你应该这么做。我只是认为你不需要感到沮丧在你组合他们的时候。</p>

<h3><strong>Rule 13: 限制’required‘ 委托 Limit ‘required’ delegate methods</strong></h3>

<p>Be very careful when choosing which of your delegate methods are required. Too many required methods tends to indicate:</p>

<p>请小心的选择哪些委托是必须的，大多数的’required‘方法往往:</p>

<ul>
<li>Poor choice of default behaviour.</li>
<li><p>Too much of your own politics are in your code.</p></li>
<li><p>默认行为不够不充分</p></li>
<li>加入了太多你的主观意见</li>
</ul>


<p>A well-designed component should need very, very few required delegate methods - just the bare minimum to do whatever it does. Choose carefully. Equally, remember that it’s easy to add optional methods later, but it’s hard to turn optional ones into required ones (people will complain, and rightly so).</p>

<p>一个非常好的component 应该需要非常非常少的’required‘委托方法 - 最小化无论做什么。认真公平的去选择，记得以后会容易增加’optional‘的方法，但是以后很难从’optional‘转变成’required‘方法。</p>

<p>MGTileMenu has five required methods, four of which are data-source methods:
MGTileMenu 有5个’required‘ 方法，其中4个数据源方法：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nf">numberOfTilesInMenu:</span><span class="p">(</span><span class="n">MGTileMenuController</span> <span class="o">*</span><span class="p">)</span><span class="nv">tileMenu</span><span class="p">;</span> <span class="c1">// in total (will be shown in groups of up to 5 per page)</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">UIImage</span> <span class="o">*</span><span class="p">)</span><span class="nf">imageForTile:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">tileNumber</span> <span class="nf">inMenu:</span><span class="p">(</span><span class="n">MGTileMenuController</span> <span class="o">*</span><span class="p">)</span><span class="nv">tileMenu</span><span class="p">;</span> <span class="c1">// zero-based tileNumber</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">labelForTile:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">tileNumber</span> <span class="nf">inMenu:</span><span class="p">(</span><span class="n">MGTileMenuController</span> <span class="o">*</span><span class="p">)</span><span class="nv">tileMenu</span><span class="p">;</span> <span class="c1">// zero-based tileNumber</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">descriptionForTile:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">tileNumber</span> <span class="nf">inMenu:</span><span class="p">(</span><span class="n">MGTileMenuController</span> <span class="o">*</span><span class="p">)</span><span class="nv">tileMenu</span><span class="p">;</span> <span class="c1">// zero-based tileNumber</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first two follow the One True Data-Source Protocol. The third and fourth do too, but they also expose my politics: I think that software should be accessible, and I’m forcing you to supply a label and hint for each tile for VoiceOver to read. I’m comfortable with it.</p>

<p>前两个遵循一个真正的数据源协议。第三四个也是如此，但是他们也有我个人的意见：我认为软件应该是可访问的,我迫使你提供一个标签,示意用VoiceOver来读每个tile。我感到这样很舒适。</p>

<p>There’s also one delegate method proper:</p>

<p>这里也有一个委托方法：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">tileMenu:</span><span class="p">(</span><span class="n">MGTileMenuController</span> <span class="o">*</span><span class="p">)</span><span class="nv">tileMenu</span> <span class="nf">didActivateTile:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">tileNumber</span><span class="p">;</span> <span class="c1">// zero-based tileNumber</span>
</span></code></pre></td></tr></table></div></figure>


<p>That one is required because it’s how you find out that a tile was activated. If you’re not willing to pay attention to that, MGTileMenu will do nothing useful, and you might as well not be using it at all. So, it’s required.</p>

<p>这个一个是’required‘因为他是告诉你如何找到一个激活的‘tile’。如果你将来不注重这个，MGTileMenu不可使用,你可能也不会使用它。所以,这是必须的。</p>

<h3><strong>Rule 14: 设计辅助功能特性 Design for accessibility</strong></h3>

<p>Following immediately on from the last rule: make things accessible. Don’t tack it on at the end, either: design for accessibility from the start. If you follow the “use controls in your controls” rule, you probably get this almost for free.</p>

<p>遵循最后一条规则：让事情访问。不要在结束的时候思考它，从一开始注意辅助功能设计。如果你遵循“use controls in your controls”的原则，你可能已经完成了这个功能。</p>

<p>Delegate (or rather, data-source) methods, as shown above, are a great place to twist the arm of another developer to make them at least provide something for VoiceOver. And if you can automatically repurpose something visual (like a displayed text label) as a VoiceOver label, so much the better (again, in most cases VoiceOver already handles this for you).</p>

<p>委托(或相反,数据源)方法,如上所示,是一个伟大的地方的手臂扭另一个开发者来让他们至少提供一些VoiceOver。如果你可以自动改变一些视觉(就像一个显示文本标签)作为一个VoiceOver标签,那就更好了(同样,在大多数情况下已经为您处理这个VoiceOver)。</p>

<p>Be socially conscious. Make it hard not to support accessibility. I also wrote <a href="http://mattgemmell.com/2010/12/19/accessibility-for-iphone-and-ipad-apps/">an article about supporting VoiceOver</a> in iOS apps, which Apple recommends to companies who contact them about accessibility programming. I recommend it too, but then I wrote it, so you’d expect that.</p>

<p>想要有好的社会意识。就想方设法支持辅助功能。我也写了一篇关于在iOS应用程序中支持VoiceOver,苹果公司建议联系他们了解关于辅助功能的编程。我也推荐它,并且后来我是这么做的的,所以你会希望你这样做。</p>

<h3><strong>Rule 15: Use semantic objects for parameters</strong></h3>

<p>This doesn’t just apply to protocols, but protocols are where it’s particularly important. Use actual, first-class, semantically-appropriate objects for data, even if it’s more hassle for you to work with in your implementation.</p>

<p>这一条不仅仅适用于协议，虽然协议对于它特别的重要，使用合适一流并且具有合适语义的对象，即使它的出现让你的实现更加的复杂。</p>

<p>If you’re asking for a date, don’t accept numbers - get an actual NSDate object. There are objects or structures for just about everything, and you should use them as intended. Create a class if you need to (you probably won’t need to).</p>

<p>如果你需要一个日期，不接受数字，意思说你要一个实际的NSDate对象，这个对象和结构就是一切，你应该使用他们作为你的预期值。如果需要你可以创建一个类（你也许不需要）</p>

<p>The one standard exception, of course, is indices - there’s no reason for them to be anything but primitives, since NSNumber adds nothing that’s semantically important enough to offset the bundling/unbundling inconvenience.</p>

<p>一个标准的例外,当然,是指数——没有理由为他们增加语义除了原语,因为NSNumber的原有语义足以抵消打包/解包带来的不便。</p>

<h3><strong>Rule 16: 增大api的容量如果语义不明确 Enhance the API if semantics don’t fit</strong></h3>

<p>I see this all the time. I mentioned earlier how you can think of almost any new, custom control as being substantially like something that already exists (often, it’s like the already-existing thing that you’re using behind the scenes for your implementation).</p>

<p>我总是看到这样的问题，我早些时候提到你如何去思考任何新的自定义的控件是一些已经存在的东西。（通常，它就像你实现了已经存在的东西的幕后的方法）</p>

<p>That’s great, and you’re very clever, but semantics trump similarity. It’s absolutely fine (and wonderful) to layer a new API on top of an existing one, in order to make the semantics fit. For example:</p>

<p>这很好，你很聪明，但是语义要胜于相似。这当然很可以在已有的api上增加一层，为了让语义更加的合适比如:</p>

<ul>
<li>A contact list implemented with a table should have a contacts-related API</li>
</ul>


<p>一个基于table的联系人列表应该有一个联系人有关的API</p>

<ul>
<li>A month-view calendar implemented with a grid should have a date-related API</li>
</ul>


<p>一个基于grid的月历应该有一个日期相关的api</p>

<p>And so forth. Don’t force yourself (or other developers) to constantly be mentally converting between an abstract implementation API and the actual semantics of the component - make the API reflect the actual purpose of the component instead.</p>

<p>等等。不要强迫你自己(或其他开发人员)不断的在脑子里转换一个抽象的实现API和组件的实际语义——容易使API反映实际目的与组件相反。</p>

<p>MGTileMenu’s delegate protocol does that by treating the menu not as a collection of UIButtons (the implementation), but rather as a unified menu, with numbered tiles each of which have relevant display properties.</p>

<p>MGTileMenu’s 委托协议实现并没有采用一个UIButton的集合，而是一个统一的菜单，每一个有编号tiles都有相关的协议。</p>

<h3><strong>Rule 17: 高亮总是很有趣 Highlighting is interesting</strong></h3>

<p>I learned this one by having to go back and add new delegate methods and notifications to APIs I thought were finished. For interactive controls, highlighting is interesting. By ‘interesting’, I mean of potential significance to the surrounding app.</p>

<p>我知道这一点是返回增加一个委托方法并且通知APIs当我完成的时候，对于交互式的控制，高亮是有趣的。重点突出“有趣”，我的意思时候是说app的潜在意义要有趣。</p>

<p>Any control will inform the app (in one sense or another, perhaps just by calling an action method) when it has been fully triggered, but comparatively few will notify when they’ve been visually highlighted (selected, pressed) or unhighlighted without being triggered. It turns out that that’s actually pretty important. The app might want to:</p>

<p>任何控制将通知应用程序（或其他在某种意义上说，也许只是通过调用一个动作方法）时，它已经完全触发，但相对较少的通知时，他们已经被视觉上突出显示（选中，按下），或者未突出显示没有被触发。事实证明，这实际上是非常重要的。该应用程序可能希望：</p>

<ul>
<li>Add, remove or reposition ancillary UI.</li>
<li>Update some other part of its display.</li>
<li>Offer some contextual help.</li>
<li>Some other thing you can’t possibly foresee.</li>
</ul>


<p>Highlighting is certainly an example of an optional set of delegate methods, but they’re important to have, and almost always trivial to implement.</p>

<p>+添加删除或者重新定位UI。
+更新其中的一部分显示。
+提供一些上下文辅助。
+一些其他不可预见的情况。
高亮当然是一个示例的一组可选的委托方法,但它们很重要,而且几乎总是琐碎的实现。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">tileMenu:</span><span class="p">(</span><span class="n">MGTileMenuController</span> <span class="o">*</span><span class="p">)</span><span class="nv">tileMenu</span> <span class="nf">didSelectTile:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">tileNumber</span><span class="p">;</span> <span class="c1">// zero-based tileNumber</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">tileMenu:</span><span class="p">(</span><span class="n">MGTileMenuController</span> <span class="o">*</span><span class="p">)</span><span class="nv">tileMenu</span> <span class="nf">didDeselectTile:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">tileNumber</span><span class="p">;</span> <span class="c1">// zero-based tileNumber</span>
</span></code></pre></td></tr></table></div></figure>


<h3><strong>Rule 18: Optional方法并不是一个承诺 Optional methods aren’t a commitment</strong></h3>

<p>Many of us approach optional delegate methods as an either-or situation: if you don’t implement them, you get the default behaviour, and if you do, then you’re totally responsible for what happens. That’s not ideal.</p>

<p>我们中的许多人方法可选的委托方法作为一个二选一的情况:如果你不实现它们,你会得到默认的行为,如果你这么做了,那么你完全要为发生的事情负责。这并不是理想的。</p>

<p>In any implementation which provides an optional delegate method, you should still fall back on the default behaviour even if the method is implemented, but doesn’t return something sensible. It sounds obvious, but it’s amazing how many components will blithely let delegate objects return any kind of craziness without sanity-checking, just because the delegate has somehow promised to behave itself by implementing the method.</p>

<p>在任何实现提供了一个可选的委托方法,您仍然应该依靠缺省行为即使实现了该方法,但不会返回一些明智的东西。这听起来显而易见,但令人惊奇的是,很多组件将无忧无虑地让委托对象返回任何愚蠢类型而且没有做基本检查,仅仅因为委托方法莫名其妙的实现本身方法的行为。</p>

<p>I’m talking particularly about visual customisations, such as background colours or images. Consider very, very carefully whether you shouldn’t intervene in that case, and fall back upon your default appearance. Did they really want to show nothing? Does that even make sense? Will it make the control look broken? If so, step in, and serve up the default just as if the delegate method was never implemented in the first place.</p>

<p>我说的尤其是关于视觉自定义,比如背景颜色或图片。非常、非常小心考虑你是否不应该干预在这种情况下,依靠你的默认外观。他们是否真的想要显示什么?它合理么?它会使控制显示出错?如果是这样,你就应该提供默认数值就比如委托方法没在第一时间实现。</p>

<p>Relatedly, have a documented, standard, unsurprising way to deliberately invoke the default behaviour via returning something like nil from each optional delegate method.</p>

<p>同理，有一个记录在案的标准的，不会令人感到惊讶的方式去调用默认行为从Optional委托返回一些类似nil的东西</p>

<p>MGTileMenu, for example, has a relatively complex hierarchy of ways you can customise tile backgrounds. You can implement any (or all, or none) of three optional delegate methods to provide a background image, gradient or colour for each tile, in that priority order. You can also opt into the default behaviour for any tile at any time, by returning nil or NULL as is appropriate to the type.</p>

<p>MGTileMenu 比如，有一个相对复杂的方法你可以定义tile的背景，你可以实现三个optional委托的任意（当然也可以是全部或者一个也不实现）为每一个tile去提供背景图，渐变或者颜色。在他们的优先级下，你也可以在任何时候为每个tile选择默认行为，通过适当的类型返回nil 或者NULL。</p>

<p>You’ll have to try fairly hard (by returning clearColor, or an empty UIImage object) to really, really make a tile’s background completely transparent.</p>

<p>你可以试试一些相对特殊的例子（返回透明或者一个空的image对象），使得tile的背景完全透明。</p>

<h3><strong>Rule 19: 总是提及是谁在讲话 Always say who’s talking</strong></h3>

<p>This is a simple rule, and an equally simple mistake to make. In your delegate methods, always pass the sender as a parameter. Always. Even for singletons. Even for things you cannot conceive would ever be used more than once simultaneously. No exceptions.</p>

<p>这是一个相对简单的规则，以及同样简单的错误，在你的委托方法中。你总要传入sender当做一个参数。即使是一个单例。即使你不能相像这个对象会同时超过一次使用。没有例外。</p>

<p>像这样</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">tileMenu:</span><span class="p">(</span><span class="n">MGTileMenuController</span> <span class="o">*</span><span class="p">)</span><span class="nv">tileMenu</span> <span class="nf">didActivateTile:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">tileNumber</span><span class="p">;</span> <span class="c1">// zero-based tileNumber</span>
</span></code></pre></td></tr></table></div></figure>


<p>不要像这样</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">tileMenuDidActivateTile:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">tileNumber</span><span class="p">;</span> <span class="c1">// zero-based tileNumber</span>
</span><span class='line'><span class="c1">// Um, WHICH menu?</span>
</span></code></pre></td></tr></table></div></figure>


<h3><strong>Rule 20:把有特点的参数放在前面 Put distinguishing params first in query methods</strong></h3>

<p>The One True Data-Source Protocol should always have query methods such that the most interesting thing goes first. The specific quality or property you’re requesting a value for. Like this:</p>

<p>一个真正的数据源协议应该总是有这样的查询方法,最容易让人感兴趣的总是是第一个，特定的质量或属性你请求一个值像这样:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">UIImage</span> <span class="o">*</span><span class="p">)</span><span class="nf">imageForTile:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">tileNumber</span> <span class="nf">inMenu:</span><span class="p">(</span><span class="n">MGTileMenuController</span> <span class="o">*</span><span class="p">)</span><span class="nv">tileMenu</span><span class="p">;</span> <span class="c1">// zero-based tileNumber</span>
</span></code></pre></td></tr></table></div></figure>


<p>不要像这样:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">UIImage</span> <span class="o">*</span><span class="p">)</span><span class="nf">tileMenu:</span><span class="p">(</span><span class="n">MGTileMenuController</span> <span class="o">*</span><span class="p">)</span><span class="nv">tileMenu</span> <span class="nf">imageForTile:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">tileNumber</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The return type should flow naturally into the first part of the method name, without causing surprise. Data-source protocols often have many similarly-named methods, so keep the unique and interesting parts at the very start. Easier to read, and easier to autocomplete.</p>

<p>返回类型的流程应该自然地进入第一部分的方法名称,而不造成任何惊讶。数据源通常有许多名称类似的协议方法,所以保持独特而有趣的部分一开始。更易于阅读,并且容易自动完成。</p>

<p>Some people have pointed out that Apple’s UITableViewDataSource protocol doesn’t do it that way, and instead puts the sender first, for example:</p>

<p>一些人指出,苹果UITableViewDataSource协议并不这样做,相反让发送者首先,例如:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nf">tableView:</span><span class="p">(</span><span class="n">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span> <span class="nf">numberOfRowsInSection:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">section</span>
</span></code></pre></td></tr></table></div></figure>


<p>All I can say is: I’m aware of the difference. I stand by my argument.
我能说的就是，我知道区别，但是我固执己见。</p>

<h3><strong>Rule 21: 通知方法不要忘记把sender放在第一个 Put the sender first in notification methods</strong></h3>

<p>The One True Delegate Protocol, however, isn’t for queries but rather for notifications. In this situation, you put the sender first (following our “say who’s talking” rule above).</p>

<p>一个真正的委托，不是为查询而是通知。在这种情况下,你把发送放在第一位(遵守我们的习惯上的“谁”在说话的规则)。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">tileMenu:</span><span class="p">(</span><span class="n">MGTileMenuController</span> <span class="o">*</span><span class="p">)</span><span class="nv">tileMenu</span> <span class="nf">willSwitchToPage:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">pageNumber</span><span class="p">;</span> <span class="c1">// zero-based pageNumber</span>
</span></code></pre></td></tr></table></div></figure>


<p>This follows how an interaction would go between two people having a conversation. You wouldn’t just jump in and say “She’s going to be late,” because the other person would have to ask “Who?”</p>

<p>这个遵循一个两人交谈的时候，你不会只跳出来说“Ta要迟到了”，因为另一个人会问“谁”？</p>

<p>Instead, you start by saying who’s talking. It’s a convention, and handily distinguishes query (data-source) from notification (delegate) methods.</p>

<p>相反， 你会以在讨论谁作为开始，这是一个惯例可以轻松的区分数据源和委托。</p>

<h3><strong>Rule 22: 如果打破公约，不如扔掉它If a convention is broken, throw it away</strong></h3>

<p>Having said all of the above, remember that convention and consistency must at some point bow to superior judgement - in this case, yours. If a convention is broken, skip it without worrying. Rename things, if yours is truly better.</p>

<p>上面说了这么多,记住,公约和一致性必须在某种程度上屈服于优秀的判断力——在这种情况下,你的。如果一个公约被打破,不必担心跳过它。重命名的事情,如果你做的更好。</p>

<p>As an example, there’s a pre-existing convention for menu controls whereby you can enable or disable menu-items via the delegate, using a method called validateMenuItem:. For the sake of consistency, I was tempted to use that same method name as part of my delegate protocol. I decided not to, because:</p>

<p>作为一个例子,有一个预先存在的公约菜单控件,您可以启用或禁用菜单项通过委托,使用了一种叫做validateMenuItem:。为了一致性,我想用同样的方法名称作为我的委托协议。我决定不去,因为:</p>

<ul>
<li>It has a horrible, horrible name. “Validate”? That doesn’t say “enable” to me.</li>
<li>It’s imperative, where in my case I’m really asking a question.</li>
<li><p>It broke the naming scheme of my other delegate methods.</p></li>
<li><p>态有一个可怕的名字，““Validate””？不如叫做“enabled”</p></li>
<li>这个势在必行，在我的使用中我真的提到了这个问题</li>
<li>它打破了我以往的委托方法的命名规则</li>
</ul>


<p>Instead, I went for something simpler and more understandable, if unconventionally-named:</p>

<p>相反，我用了一些简单容易理解，非公约的命名:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">isTileEnabled:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">tileNumber</span> <span class="nf">inMenu:</span><span class="p">(</span><span class="n">MGTileMenuController</span> <span class="o">*</span><span class="p">)</span><span class="nv">tileMenu</span><span class="p">;</span> <span class="c1">// zero-based tileNumber</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can debate the specific wording, but if you encountered that method you’d know what it was for and how to use it right away. To me, that’s better.</p>

<p>我们可以讨论特定的措辞,但是如果你遇到了这个方法,你就可以懂得这是什么和如何立刻使用它。对我来说,这样更好。</p>

<h3><strong>通知 Notifications</strong></h3>

<p>Notifications are the other half of delegate protocols. My position is that, if you’re using a delegate protocol (you should, if it’s at all appropriate), then it’s incomplete until you add the notifications that naturally follow from it.</p>

<p>通知是委托协议的另一部分，我的立场是。如果你在使用委托（你应该，如果他很恰当）那么它是不完整的，直到你自然的增加了通知。</p>

<p>In MGTileMenu, you can find the notifications in the interface file for MGTileMenuController.</p>

<p>在MGTileMenu中，你可以找到通知在[MGTileMenuController][https://github.com/mattgemmell/MGTileMenu/blob/master/MGTileMenu/MGTileMenuController.h]的接口文件中。</p>

<h3><strong>Rule 23: 通知要遵循委托 Notifications follow delegate methods</strong></h3>

<p>There’s a natural correspondence between delegate methods (proper; not data-source methods) and notifications. You use them in the same places in your code, and for exactly the same purpose.</p>

<p>有一个自然的通信在委托（当然不是数据源方法）和通知之间。你在同样的为了同样的目的地方使用他们。</p>

<p>If you have a delegate method that tells the delegate about something happening, you should usually provide a notification for that same purpose. Take your notification-like delegate methods, remove the interrogatory ones (the should methods), and you have your list of notifications to implement.</p>

<p>如果你有一个委托方法告诉这个委托一些东西发生，通常情况下你提供一个通知为了相同的目的。让你的通知方法更像一个委托，消除疑问，并且你要罗列你要实现的通知。</p>

<p>The delegate methods’ parameters should match up with the notifications’ userInfo contents, with the obvious exception that you pass the sender as the notification’s object, rather than bundled up in the info dictionary.</p>

<p>委托方法的参数应该和通知的userInfo相对应，很明显的例外，你传入了sender当做通知的对象，而不是绑定在info字典中。</p>

<p>Delegate methods:</p>

<p>代理方法</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">tileMenuWillDisplay:</span><span class="p">(</span><span class="n">MGTileMenuController</span> <span class="o">*</span><span class="p">)</span><span class="nv">tileMenu</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">tileMenuDidDisplay:</span><span class="p">(</span><span class="n">MGTileMenuController</span> <span class="o">*</span><span class="p">)</span><span class="nv">tileMenu</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>对应的通知</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">extern</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">MGTileMenuWillDisplayNotification</span><span class="p">;</span> <span class="c1">// menu will be shown</span>
</span><span class='line'><span class="k">extern</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">MGTileMenuDidDisplayNotification</span><span class="p">;</span> <span class="c1">// menu has been shown</span>
</span></code></pre></td></tr></table></div></figure>


<h3><strong>Rule 24: 慷慨的对待通知的userInfo Be generous with notifications’ userInfo</strong></h3>

<p>Give a notification the information it requires in order to be useful. Remember that notification receivers may (and almost always will) not have anything to do with the delegate or data-source chain for your component.</p>

<p>给一个通知它所需要的信息才会有用。记住,通知接收者可能(而且几乎总是会)没有任何委托或数据源组件链。</p>

<p>Ask yourself what would be useful, and provide that information. At the very least, you must ensure that all arguments provided to the corresponding delegate method are wrapped up in the userInfo object.</p>

<p>问问你自己什么是有用的，并且提供对应的的信息，在最后你应该确保所有的参数封装在userInfo并提供给了相应的委托方法。</p>

<p>Delegate methods:
代理方法:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">tileMenu:</span><span class="p">(</span><span class="n">MGTileMenuController</span> <span class="o">*</span><span class="p">)</span><span class="nv">tileMenu</span> <span class="nf">willSwitchToPage:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">pageNumber</span><span class="p">;</span> <span class="c1">// zero-based pageNumber</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">tileMenu:</span><span class="p">(</span><span class="n">MGTileMenuController</span> <span class="o">*</span><span class="p">)</span><span class="nv">tileMenu</span> <span class="nf">didSwitchToPage:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">pageNumber</span><span class="p">;</span> <span class="c1">// zero-based pageNumber</span>
</span></code></pre></td></tr></table></div></figure>


<p>And corresponding notifications:
对应的通知</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">// The following notifications have a user info key &quot;MGPageNumber&quot; with an NSNumber (integer, zero-based) value.</span>
</span><span class='line'><span class="cp">#define MGPageNumberKey @&quot;MGPageNumber&quot;</span>
</span><span class='line'><span class="k">extern</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">MGTileMenuWillSwitchToPageNotification</span><span class="p">;</span> <span class="c1">// menu will switch to the given page</span>
</span><span class='line'><span class="k">extern</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">MGTileMenuDidSwitchToPageNotification</span><span class="p">;</span> <span class="c1">// menu did switch to the given page</span>
</span></code></pre></td></tr></table></div></figure>


<h3><strong>Rule 25: 测试他们 Test the hell out of it</strong></h3>

<p>Finally, something we all already know. Software engineering and professionalism 101: make sure it actually works.</p>

<p>最后,我们都已经知道的东西。软件工程和专业101:确保它真的有用。</p>

<p>Whether testing means formal TDD is up to you, but testing itself isn’t optional. Every optional delegate method. Every posted notification. Every point of customisation, in every possible combination. Components provide a thousand opportunities for subtle issues.</p>

<p>测试是否意味着TDD则取决于你,但测试本身不是可选的。每一个可选的委托方法。每个发布通知。每一个点的定制,在每一个可能的组合。组件提供一千的微妙问题的机会。</p>

<p>There will be bugs. Find them and fix them first. If you’re pushed for time, cut a feature and debug instead. Thou shalt suffer no bugs to ship.</p>

<p>将会有bug。第一找到他们并修复它们。如果你正在争取时间,相反减少一个特性和调试。你必不会遭受到bug的威胁。</p>

<h3><strong>最后的思考 Final thoughts</strong></h3>

<p>I’ve formulated the above rules by learning the hard way, through years of making mistakes while creating components and their APIs. I do try to practise what I preach, though inevitably there will be a hundred examples of where I haven’t.</p>

<p>我定制了以上这些规则在困难的学习的道路上，通过多年的犯过的错误在我建立的组件和APIs的时候，我试着联系遵循我的说法。虽然不可避免有上百个不同的例子出现。</p>

<p>Whilst not all rules apply to all situations, and no rule applies in every case, following as many of these as you can will give you a better chance of producing flexible, well-designed, reusable components for yourself and others to enjoy.</p>

<p>虽然并不是所有的规则适用于所有情况,没有规则适用于每一个案例中,如下,其中许多可以给你一个更好的机会产生灵活的、设计良好的、可重用的组件为自己和他人欣赏。</p>

<p>You may want to grab a quick summary of the rules, as shown below; I have the full-size version hosted on Flickr.</p>

<p>你可能想抓住的快速摘要规则,如下所示,我有全尺寸版本托管在Flickr。</p>

<p><img src="http://farm9.staticflickr.com/8027/7263502878_a2ea0d4d53_o.jpg"></p>

<p>磕磕碰碰终于结束了，如果你们发现错误请留言告诉我，谢谢！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[arc+blocks+llvm4 的时代1/3]]></title>
    <link href="http://weekwood.github.com/2012/12/24/arc-plus-blocks-plus-llvm4-shi-dai-1/"/>
    <updated>2012-12-24T14:56:00+08:00</updated>
    <id>http://weekwood.github.com/2012/12/24/arc-plus-blocks-plus-llvm4-shi-dai-1</id>
    <content type="html"><![CDATA[<h1>ARC</h1>

<p>ARC(Automatic Reference Counting) 到现在已经出来一年有余,越来越多的团队已经体会到他的好处。曾和同行们讨论过新手是否有必要深入学习手动内存管理。个人认为从arc开始的成本要低很多，而且能编译出强壮的代码，何乐不为？</p>

<!-- more -->


<h3>什么是手动内存管理</h3>

<blockquote><p>如果需要持有一个对象，那么对其发送retain 如果之后不再使用该对象，那么需要对其发送release（或者autorealse） 每一次对retain,alloc或者new的调用，需要对应一次release或autorealse调用</p></blockquote>

<h3>自动内存管理</h3>

<p>自动内存其实也简单</p>

<blockquote><p>在你的工程中使用 ARC 非常简单。你还像往常一样编程,只是不再调用 retain,release 和 autorelease 了。</p></blockquote>

<h3>生命周期</h3>

<h4>__strong</h4>

<p>变量声明缺省都带有__strong关键字，如果变量什么关键字都不写，那么缺省就是强参照。</p>

<h4>__weak</h4>

<p>该概念是新特性，从 iOS 5/ Mac OS X 10.7 开始导入。由于该类型不影响对象的生命周期，所以如果对象之前就没有持有者，那么会出现刚创建就被破弃的问题，比如下面的代码。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSString</span> <span class="n">__weak</span> <span class="o">*</span><span class="n">string</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFormat:</span><span class="s">@&quot;First Name: %@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">self</span> <span class="n">firstName</span><span class="p">]];</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;string: %@&quot;</span><span class="p">,</span> <span class="n">string</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上是一个__weak的例子，由于string没有赋值给任何变量，所以这里返回值是null</p>

<h4>__unsafe_unretained</h4>

<p>该关键字与<strong>weak一样，也是弱参照，与</strong>weak的区别只是是否执行nil赋值(Zeroing)。但是这样，需要注意变量所指的对象已经被破弃了，地址还还存在，但内存中对象已经没有了。如果还是访问该对象，将引起「BAD_ACCESS」错误。</p>

<h3>自动给释放池</h3>

<p>使用ARC，你不能使用NSAutoReleasePool类来管理自动释放池了，作为替代，ARC使用一个新的语法结构：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="err">@</span><span class="n">autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>     <span class="c1">// Code, such as a loop that creates a large number of temporary objects.</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>ARC 代码自动变换</h3>

<p>另外，Xcode 4.2开始，增加了旧代码向 ARC 代码自动转换的功能。有兴趣的朋友可以试试。位置是：</p>

<blockquote><p>Edit->Refactor->Convert to Objective-C ARC</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Regex to catch @mention #hashtag and link http(s)://]]></title>
    <link href="http://weekwood.github.com/2012/12/23/regex-to-catch-at-mention-number-hashtag-and-link-http-s-slash-slash/"/>
    <updated>2012-12-23T17:13:00+08:00</updated>
    <id>http://weekwood.github.com/2012/12/23/regex-to-catch-at-mention-number-hashtag-and-link-http-s-slash-slash</id>
    <content type="html"><![CDATA[<p>在做tweet类文本的时候你需要解析以#开头的话题 @开头的昵称 http开头的连接
以下这个就是一个很好的例子(核心代码：<a href="https://github.com/SebastienThiebaud/STTweetLabel">STTweetLabel</a>)</p>

<!-- more -->




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSRegularExpression</span> <span class="o">*</span><span class="n">regex</span> <span class="o">=</span> <span class="p">[</span><span class="nl">NSRegularExpressionregularExpressionWithPattern:</span><span class="s">@&quot;((@|#)([A-Z0-9a-z(é|ë|ê|è|à|â|ä|á|ù|ü|û|ú|ì|ï|î|í)\u4e00-\u9fa5_]+))|(http(s)?://([A-Z0-9a-z._-]*(/)?)*)&quot;</span> <span class="nl">options:</span><span class="n">NSRegularExpressionCaseInsensitive</span> <span class="nl">error:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">NSTextCheckingResult</span> <span class="o">*</span><span class="n">match</span> <span class="o">=</span> <span class="p">[</span><span class="n">regex</span> <span class="nl">firstMatchInString:</span><span class="n">word</span> <span class="nl">options:</span><span class="mi">0</span> <span class="nl">range:</span><span class="n">NSMakeRange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">[</span><span class="n">word</span> <span class="n">length</span><span class="p">])];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Dissolve the word (for example a hashtag: #youtube!, we want only #youtube)</span>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">wordCharacters</span> <span class="o">=</span> <span class="p">[</span><span class="n">word</span> <span class="nl">substringWithRange:</span><span class="n">match</span><span class="p">.</span><span class="n">range</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Draw the touchable word</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">wordCharacters</span> <span class="nl">isEqualToString:</span><span class="s">@&quot;&quot;</span><span class="p">])</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Set the color for mention/hashtag OR weblink</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">([</span><span class="n">wordCharacters</span> <span class="nl">hasPrefix:</span><span class="s">@&quot;#&quot;</span><span class="p">]</span> <span class="o">||</span> <span class="p">[</span><span class="n">wordCharacters</span> <span class="nl">hasPrefix:</span><span class="s">@&quot;@&quot;</span><span class="p">])</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>           <span class="c1">//do something...</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span> <span class="p">([</span><span class="n">wordCharacters</span> <span class="nl">hasPrefix:</span><span class="s">@&quot;http&quot;</span><span class="p">])</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="c1">//do something...</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
